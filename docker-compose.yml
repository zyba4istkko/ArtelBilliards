version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:14
    container_name: artel_postgres
    environment:
      POSTGRES_DB: artel_billiards
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кеширования и сессий
  redis:
    image: redis:7-alpine
    container_name: artel_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ брокер сообщений
  rabbitmq:
    image: rabbitmq:3-management
    container_name: artel_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI приложение
  backend:
    build: 
      context: ./fast-api-app
      dockerfile: Dockerfile
    container_name: artel_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/artel_billiards
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:password@rabbitmq:5672
      - JWT_SECRET_KEY=your-secret-key-here
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./fast-api-app:/app
      - ./logs:/app/logs
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Worker для обработки асинхронных задач
  worker:
    build: 
      context: ./fast-api-app
      dockerfile: Dockerfile
    container_name: artel_worker
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/artel_billiards
      - RABBITMQ_URL=amqp://admin:password@rabbitmq:5672
      - ENVIRONMENT=development
    volumes:
      - ./fast-api-app:/app
      - ./logs:/app/logs
    command: python -m app.worker

  # Frontend React приложение
  frontend:
    build: 
      context: ./react-app
      dockerfile: Dockerfile
    container_name: artel_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./react-app:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
    command: npm run dev

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: artel_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: artel_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: artel_network