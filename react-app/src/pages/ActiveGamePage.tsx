import React, { useState, useEffect, useMemo } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { 
  Button, 
  Card, 
  CardBody, 
  CardHeader, 
  Avatar, 
  Badge,
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Input,
  Chip,
  Divider
} from '@nextui-org/react'
import { ArrowLeft, Clock, Plus, Edit2, X } from 'lucide-react'
import GameHeader from '../components/ui/GameHeader'
import { gameService } from '../api/services/gameService'
import { SessionService } from '../api/services/sessionService'
import { TemplateService } from '../api/services/templateService'

interface ActiveGamePageProps {
  // Props –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

interface Player {
  id: string
  name: string
  avatar: string
  points: number
  money: number
  balls: Ball[]
  fouls: Foul[]
  queue_position?: number // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
}

interface Ball {
  id: string
  type: 'red' | 'yellow' | 'green' | 'brown' | 'blue' | 'pink' | 'black' | 'white'
  points: number
  name: string
  color: string
  timestamp: string  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞—Ä–∞
}

interface Foul {
  id: string
  timestamp: string
  tag?: string
}

interface LogEntry {
  id: string
  type: 'ball' | 'foul' | 'turn' | 'game_start'
  playerName: string
  description: string
  points: number
  timestamp: string
  addedBy: string
  tag?: string
  isDeleted?: boolean
}

// üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –ù–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
interface PlayerScore {
  player: Player
  totalPoints: number
  totalMoney: number
  balls: Ball[]
  fouls: Foul[]
  rank: number
}

interface GameResult {
  winner: Player
  finalScores: PlayerScore[]
  totalBalls: number
  totalFouls: number
  gameDuration: string
  completedAt: string
}

// üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –¢–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
interface GameCompletionResponse {
  id?: string
  session_id?: string
  game_number?: number
  status?: string
  winner_participant_id?: string
  started_at?: string
  completed_at?: string
  duration_seconds?: number | null
  game_data?: {
    queue_algorithm?: string
    current_queue?: any
    statistics?: {
      participant_stats?: Record<string, {
        points: number
        money: number
        balls: number
        fouls: number
      }>
      winner_participant_id?: string
      total_balls?: number
      total_fouls?: number
      completion_timestamp?: string
    }
  }
}

export default function ActiveGamePage({}: ActiveGamePageProps) {
  const { gameId } = useParams()  // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: sessionId -> gameId
  const navigate = useNavigate()
  
  // State
  const [gameStartTime, setGameStartTime] = useState<Date | null>(null)  // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏–∑ –ë–î
  const [gameTime, setGameTime] = useState('00:00')
  const [currentUser] = useState('–¢—ã') // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const [isCreator] = useState(true) // –¢–æ–ª—å–∫–æ creator –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–ø–∏—Å–∏
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentGame, setCurrentGame] = useState<any>(null)
  const [session, setSession] = useState<any>(null)
  
  const [players, setPlayers] = useState<Player[]>([])
  
  const [logEntries, setLogEntries] = useState<LogEntry[]>([])
  
  const [isScoreModalOpen, setIsScoreModalOpen] = useState(false)
  const [isEndGameModalOpen, setIsEndGameModalOpen] = useState(false)
  const [isEditLogModalOpen, setIsEditLogModalOpen] = useState(false)
  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null)
  const [selectedBall, setSelectedBall] = useState<Ball | null>(null)
  const [selectedTag, setSelectedTag] = useState<string>('')
  const [customDescription, setCustomDescription] = useState('')
  const [editingLogEntry, setEditingLogEntry] = useState<LogEntry | null>(null)
  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  const [showGameResults, setShowGameResults] = useState(false)

  // Effect –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
  useEffect(() => {
    const initializeGame = async () => {
      if (!gameId) return
      
      try {
        setIsLoading(true)
        setError(null)
        
        console.log('üéÆ ActiveGamePage: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É:', gameId)
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
        const gameData = await gameService.getGame(gameId)
        console.log('‚úÖ –ò–≥—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞:', gameData)
        setCurrentGame(gameData)
        
        // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏–∑ –ë–î
        if (gameData.started_at) {
          const startTime = new Date(gameData.started_at)
          setGameStartTime(startTime)
          console.log('‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', startTime)
        }
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –ø–æ session_id –∏–∑ –∏–≥—Ä—ã
        const sessionData = await SessionService.getSession(gameData.session_id)
        console.log('‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', sessionData)
        console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Å—Å–∏–∏:', JSON.stringify(sessionData, null, 2))
        
        // üîÑ –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏
        if (sessionData?.template_id) {
          try {
            console.log('üîç ActiveGamePage: –ó–∞–≥—Ä—É–∂–∞—é —à–∞–±–ª–æ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionData.template_id)
            const template = await TemplateService.getTemplate(sessionData.template_id)
            if (template) {
              console.log('‚úÖ ActiveGamePage: –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω:', template)
              sessionData.template = template
            }
          } catch (templateError) {
            console.error('‚ùå ActiveGamePage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞:', templateError)
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
          }
        }
        
        setSession(sessionData)
        
        // 3. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
        const participants = await SessionService.getSessionParticipants(gameData.session_id)
        console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', participants)
        
        // 4. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç Player
        const transformedPlayers = participants.map((participant: any) => {
          console.log('üéØ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞:', participant)
          console.log('üéØ participant.id:', participant.id, '—Ç–∏–ø:', typeof participant.id)
          console.log('üéØ participant.display_name:', participant.display_name)
          console.log('üéØ participant.queue_position:', participant.queue_position, '—Ç–∏–ø:', typeof participant.queue_position)
          
          return {
            id: participant.id,
            name: participant.display_name || '–ò–≥—Ä–æ–∫',
            avatar: (participant.display_name || '–ò')[0].toUpperCase(),
            points: participant.current_score || 0,
            // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: session_balance_rubles –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –∫–æ–ø–µ–π–∫–∞—Ö, –¥–µ–ª–∏–º –Ω–∞ 100
            money: (participant.session_balance_rubles || 0) / 100,
            balls: [] as Ball[],
            fouls: [] as Foul[],
            queue_position: participant.queue_position // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
          }
        })
        
        console.log('üéØ transformedPlayers:', transformedPlayers)
         
        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        if (transformedPlayers.length === 0) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏')
        }
         
        // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –ø–æ—Ç–æ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        setPlayers(transformedPlayers)

        // 5. üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try {
          const gameEvents = await gameService.getGameEvents(gameId)
          console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', gameEvents)
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ LogEntry
          const loadedLogEntries: LogEntry[] = gameEvents.map((event: any) => {
            if (event.event_type === 'shot') {
              return {
                id: event.id,
                type: 'ball',
                playerName: event.event_data.participant_name,
                description: `${event.event_data.participant_name} –∑–∞–±–∏–ª ${event.event_data.ball_name.toLowerCase()} —à–∞—Ä (+${event.event_data.points})`,
                points: event.event_data.points,
                timestamp: event.event_data.timestamp || '00:00',
                addedBy: event.event_data.participant_name,
                tag: event.event_data.tag || undefined,
                isDeleted: event.event_data.is_deleted || false
              }
            } else if (event.event_type === 'foul') {
              return {
                id: event.id,
                type: 'foul',
                playerName: event.event_data.participant_name,
                description: `${event.event_data.participant_name} —Å–æ–≤–µ—Ä—à–∏–ª —à—Ç—Ä–∞—Ñ (-1 –æ—á–∫–æ)`,
                points: -1,
                timestamp: event.event_data.timestamp || '00:00',
                addedBy: event.event_data.participant_name,
                tag: event.event_data.tag || undefined,
                isDeleted: event.event_data.is_deleted || false
              }
            }
            return null
          }).filter(Boolean) as LogEntry[]

          if (loadedLogEntries.length > 0) {
            setLogEntries(prev => [...loadedLogEntries, ...prev])
            // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å—Ä–∞–∑—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—á–∫–∞
            recalculateGameStateWithData(transformedPlayers, loadedLogEntries, sessionData.name)
          }
        } catch (error: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã:', error)
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }
        
        setIsLoading(false)
        
      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error)
        setError(error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã')
        setIsLoading(false)
      }
    }
    
    initializeGame()
  }, [gameId])

  // Timer effect
  useEffect(() => {
    const timer = setInterval(() => {
      if (gameStartTime) {
        // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        if (currentGame?.status === 'completed' && currentGame?.completed_at) {
          const completedTime = new Date(currentGame.completed_at)
          const finalDuration = Math.floor((completedTime.getTime() - gameStartTime.getTime()) / 1000)
          const minutes = Math.floor(finalDuration / 60)
          const seconds = finalDuration % 60
          setGameTime(`${minutes}:${seconds.toString().padStart(2, '0')}`)
          return // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        }
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const elapsed = Math.floor((Date.now() - gameStartTime.getTime()) / 1000)
        const minutes = Math.floor(elapsed / 60)
        const seconds = elapsed % 60
        setGameTime(`${minutes}:${seconds.toString().padStart(2, '0')}`)
      }
    }, 1000)

    return () => clearInterval(timer)
  }, [gameStartTime, currentGame?.status, currentGame?.completed_at])

  // üîÑ –ù–û–í–´–ô EFFECT: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ logEntries
  useEffect(() => {
    if (players.length > 0 && logEntries.length > 0 && session?.name) {
      console.log('üîÑ useEffect: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã')
      recalculateGameStateWithData(players, logEntries, session.name)
    }
  }, [logEntries, players.length, session?.name])

  // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —à–∞—Ä–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å–µ—Å—Å–∏–∏
  const ballTypes: Ball[] = useMemo(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω –≤ —Å–µ—Å—Å–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º —à–∞—Ä—ã –∏–∑ –Ω–µ–≥–æ
    if (session?.template_id) {
      console.log('üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞—Ä—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å–µ—Å—Å–∏–∏:', session.template_id)
      
      // üîÑ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞—Ä—ã –∏–∑ template_db –ø–æ template_id
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –Ω–æ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–æ–π:
      // 1. –ü–æ–ª—É—á–∏—Ç—å template_id –∏–∑ session
      // 2. –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞—Ä—ã –∏–∑ template_db.game_templates.rules.balls
      // 3. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç Ball[]
      
      // üîÑ –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞—Ä—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞ "–∫–æ–ª—Ö–æ–∑ 15 —à–∞—Ä"
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ API
      const templateBalls = [
        { id: 'white', type: 'white' as const, points: 1, name: '–ë–µ–ª—ã–π', color: '#ffffff', timestamp: '00:00' },
        { id: 'yellow', type: 'yellow' as const, points: 2, name: '–ñ–µ–ª—Ç—ã–π', color: '#ffeb3b', timestamp: '00:00' },
        { id: 'pink', type: 'pink' as const, points: 4, name: '–†–æ–∑–æ–≤—ã–π', color: '#e91e63', timestamp: '00:00' }
      ]
      
      console.log('üéØ –®–∞—Ä—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞ "–∫–æ–ª—Ö–æ–∑ 15 —à–∞—Ä":', templateBalls)
      return templateBalls
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    console.log('‚ö†Ô∏è –ù–µ—Ç —à–∞–±–ª–æ–Ω–∞ —Å —à–∞—Ä–∞–º–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤')
    return []
  }, [session?.template_id])

  const tagOptions = ['–°—Ç–∞–Ω–¥–∞—Ä—Ç', '–ü–æ–¥—Å—Ç–∞–≤–∞', '–°–µ—Ä–∏—è', '–û—Ç –±–æ—Ä—Ç–∞', '–°–ª–æ–∂–Ω—ã–π', '–°–ª—É—á–∞–π–Ω—ã–π']

  // üîÑ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—á–∫–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å–µ—Å—Å–∏–∏
  const getPointsValue = (sessionName: string): number => {
    // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞
    if (session?.template_id) {
      console.log('üéØ getPointsValue: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—á–∫–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞:', session.template_id)
      
      // üîÑ –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞ "–∫–æ–ª—Ö–æ–∑ 15 —à–∞—Ä"
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ API
      const templatePointValue = 50 // –ò–∑ template_db.game_templates.rules.point_value_rubles
      
      console.log('üéØ getPointsValue: –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—á–∫–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞:', templatePointValue, '‚ÇΩ')
      return templatePointValue
    }
    
    // Fallback: –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "X‚ÇΩ –∑–∞ –æ—á–∫–æ" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    const match = sessionName.match(/(\d+)‚ÇΩ –∑–∞ –æ—á–∫–æ/)
    if (match) {
      const fallbackValue = parseInt(match[1])
      console.log('üéØ getPointsValue: Fallback - —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—á–∫–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', fallbackValue, '‚ÇΩ')
      return fallbackValue
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10‚ÇΩ –∑–∞ –æ—á–∫–æ
    console.log('üéØ getPointsValue: Fallback - —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—á–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10‚ÇΩ')
    return 10
  }

  // üîÑ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–æ–ª–≥–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
  const calculateFinalDebts = useMemo(() => {
    if (!players.length || !session?.name) return []
    
    const pointsValue = getPointsValue(session.name)
    
    // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ "–ö–æ–ª—Ö–æ–∑" - —á–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const sortedPlayers = [...players].sort((a, b) => {
      // –ï—Å–ª–∏ –µ—Å—Ç—å queue_position, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–µ–º—É
      if (a.queue_position !== undefined && b.queue_position !== undefined) {
        return a.queue_position - b.queue_position
      }
      // –ò–Ω–∞—á–µ –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ –º–∞—Å—Å–∏–≤–µ
      return players.indexOf(a) - players.indexOf(b)
    })
    
    console.log('üîÑ calculateFinalDebts: –°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏:', sortedPlayers.map(p => ({ name: p.name, points: p.points, money: p.money })))
    
    // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const playerBalances: Array<{
      name: string
      balance: number
      description: string
    }> = []
    
    for (let i = 0; i < sortedPlayers.length; i++) {
      const currentPlayer = sortedPlayers[i]
      const nextPlayer = sortedPlayers[i === sortedPlayers.length - 1 ? 0 : i + 1]
      
      // –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞ —Å–≤–æ–∏ –æ—á–∫–∏
      const earnedFromPrev = currentPlayer.points * pointsValue
      
      // –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –ø–ª–∞—Ç–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞ –µ–≥–æ –æ—á–∫–∏
      const paidToNext = nextPlayer.points * pointsValue
      
      // –ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      const netBalance = earnedFromPrev - paidToNext
      
      console.log(`üîÑ calculateFinalDebts: ${currentPlayer.name}: –ø–æ–ª—É—á–∞–µ—Ç ${earnedFromPrev}‚ÇΩ –æ—Ç ${sortedPlayers[i === 0 ? sortedPlayers.length - 1 : i - 1].name}, –ø–ª–∞—Ç–∏—Ç ${paidToNext}‚ÇΩ ${nextPlayer.name}, –∏—Ç–æ–≥–æ: ${netBalance}‚ÇΩ`)
      
      playerBalances.push({
        name: currentPlayer.name,
        balance: netBalance,
        description: `${currentPlayer.name}: ${netBalance >= 0 ? '+' : ''}${netBalance}‚ÇΩ`
      })
    }
    
    console.log('üîÑ calculateFinalDebts: –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã –∏–≥—Ä–æ–∫–æ–≤:', playerBalances)
    return playerBalances
  }, [players, session?.name])

  // üîÑ –ù–û–í–´–ô useMemo: –°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const sortedPlayers = useMemo(() => {
    console.log('üîÑ üîÑ üîÑ sortedPlayers useMemo –í–´–ó–í–ê–ù!')
    console.log('üîÑ üîÑ üîÑ players.length:', players.length)
    console.log('üîÑ üîÑ üîÑ players:', players)
    
    if (!players.length) {
      console.log('üîÑ üîÑ üîÑ players –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []')
      return []
    }
    
    console.log('üîÑ sortedPlayers useMemo: –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤')
    console.log('üîÑ –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ players:', players.map(p => ({ name: p.name, queue_position: p.queue_position })))
    
    const sorted = [...players].sort((a, b) => {
      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
      console.log('üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', a.name, 'queue_position:', a.queue_position, '—Ç–∏–ø:', typeof a.queue_position)
      console.log('üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', b.name, 'queue_position:', b.queue_position, '—Ç–∏–ø:', typeof b.queue_position)
      
      if (a.queue_position !== undefined && b.queue_position !== undefined) {
        // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        // Test (1) –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–µ—Ä–µ–¥ odiNAodin (2)
        const result = a.queue_position - b.queue_position
        console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', a.name, '-', b.name, '=', result, '=>', result < 0 ? `${a.name} –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º` : result > 0 ? `${b.name} –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º` : '—Ä–∞–≤–Ω—ã')
        return result
      }
      // –ï—Å–ª–∏ –Ω–µ—Ç queue_position, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      console.log('üîÑ –ù–µ—Ç queue_position, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å')
      return 0
    })
    
    console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', sorted.map(p => ({ name: p.name, queue_position: p.queue_position })))
    console.log('üîÑ üîÑ üîÑ sortedPlayers useMemo –ó–ê–í–ï–†–®–ï–ù!')
    return sorted
  }, [players])

  // Handlers
  const handleBackToSession = () => {
    if (currentGame && currentGame.session_id) {
      navigate(`/game-session/${currentGame.session_id}`)
    } else {
      navigate('/dashboard') // Fallback –µ—Å–ª–∏ –Ω–µ—Ç session_id
    }
  }

  const handleOpenScoreModal = (player: Player) => {
    setSelectedPlayer(player)
    setIsScoreModalOpen(true)
    resetModalState()
  }

  const handleCloseScoreModal = () => {
    setIsScoreModalOpen(false)
    setSelectedPlayer(null)
    resetModalState()
  }

  const resetModalState = () => {
    setSelectedBall(null)
    setSelectedTag('')
    setCustomDescription('')
  }

  const handleSelectBall = (ball: Ball) => {
    setSelectedBall(ball)
  }

  const handleSelectTag = (tag: string) => {
    setSelectedTag(tag === selectedTag ? '' : tag)
  }

  const handleAddScore = async () => {
    if (!selectedPlayer || !selectedBall || !currentGame) return

    try {
      console.log('üéØ handleAddScore: –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤')
      console.log('üéØ handleAddScore: selectedPlayer:', selectedPlayer)
      console.log('üéØ handleAddScore: selectedBall:', selectedBall)
      console.log('üéØ handleAddScore: currentGame:', currentGame)
      
      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
      const getRealGameTime = (): string => {
        if (!gameStartTime) return '00:00'
        const elapsed = Math.floor((Date.now() - gameStartTime.getTime()) / 1000)
        const minutes = Math.floor(elapsed / 60)
        const seconds = elapsed % 60
        return `${minutes}:${seconds.toString().padStart(2, '0')}`
      }

      const realGameTime = getRealGameTime()
      
      // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
      const eventData = {
        event_type: 'shot',                    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
        participant_id: selectedPlayer.id,     // ‚úÖ –ù–£–ñ–ï–ù –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ!
        event_data: {                          // ‚úÖ event_data –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
          participant_name: selectedPlayer.name,
          ball_type: selectedBall.type,
          ball_name: selectedBall.name,
          points: selectedBall.points,
          tag: selectedTag || null,
          timestamp: realGameTime  // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        }
      }

      console.log('üéØ handleAddScore: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º eventData –≤ API:', eventData)
      console.log('üéØ handleAddScore: participant_id —Ç–∏–ø:', typeof selectedPlayer.id)
      console.log('üéØ handleAddScore: participant_id –∑–Ω–∞—á–µ–Ω–∏–µ:', selectedPlayer.id)
      console.log('üéØ handleAddScore: –í—ã–∑—ã–≤–∞–µ–º gameService.addGameEvent...')
      
      const result = await gameService.addGameEvent(currentGame.id, eventData)
      console.log('üéØ handleAddScore: API –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result)
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É:', eventData)

      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è –∏–∑ API!
      const newLogEntry: LogEntry = {
        id: result.id,  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π UUID –∏–∑ API
        type: 'ball',
        playerName: selectedPlayer.name,
        description: `${selectedPlayer.name} –∑–∞–±–∏–ª ${selectedBall.name.toLowerCase()} —à–∞—Ä (+${selectedBall.points})`,
        points: selectedBall.points,
        timestamp: realGameTime,
        addedBy: selectedPlayer.name,
        tag: selectedTag || undefined,
        isDeleted: false
      }

      setLogEntries(prev => [newLogEntry, ...prev])
       
       // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∞
       // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º recalculateGameStateWithData –∑–¥–µ—Å—å - —ç—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—é!
       // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥:', newLogEntry)
       
       handleCloseScoreModal()
    } catch (error: any) {
      console.error('‚ùå handleAddScore: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error)
      console.error('‚ùå handleAddScore: –¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error)
      console.error('‚ùå handleAddScore: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack)
      if (error.response) {
        console.error('‚ùå handleAddScore: HTTP —Å—Ç–∞—Ç—É—Å:', error.response.status)
        console.error('‚ùå handleAddScore: HTTP –¥–∞–Ω–Ω—ã–µ:', error.response.data)
      }
      setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
    }
  }

  const handleAddFoul = async () => {
    if (!selectedPlayer || !currentGame) return

    try {
      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
      const getRealGameTime = (): string => {
        if (!gameStartTime) return '00:00'
        const elapsed = Math.floor((Date.now() - gameStartTime.getTime()) / 1000)
        const minutes = Math.floor(elapsed / 60)
        const seconds = elapsed % 60
        return `${minutes}:${seconds.toString().padStart(2, '0')}`
      }

      const realGameTime = getRealGameTime()
      
      // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
      const eventData = {
        event_type: 'foul',                    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
        participant_id: selectedPlayer.id,     // ‚úÖ –ù–£–ñ–ï–ù –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ!
        event_data: {                          // ‚úÖ event_data –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
          participant_name: selectedPlayer.name,
          penalty_points: -1,
          tag: selectedTag || null,
          timestamp: realGameTime  // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        }
      }

      console.log('üéØ handleAddFoul: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º eventData –≤ API:', eventData)
      console.log('üéØ handleAddFoul: participant_id —Ç–∏–ø:', typeof selectedPlayer.id)
      console.log('üéØ handleAddFoul: participant_id –∑–Ω–∞—á–µ–Ω–∏–µ:', selectedPlayer.id)
      
      const result = await gameService.addGameEvent(currentGame.id, eventData)
      console.log('‚úÖ –®—Ç—Ä–∞—Ñ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É:', eventData)

      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è –∏–∑ API!
      const newLogEntry: LogEntry = {
        id: result.id,  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π UUID –∏–∑ API
        type: 'foul',
        playerName: selectedPlayer.name,
        description: `${selectedPlayer.name} —Å–æ–≤–µ—Ä—à–∏–ª —à—Ç—Ä–∞—Ñ (-1 –æ—á–∫–æ)`,
        points: -1,
        timestamp: realGameTime,
        addedBy: selectedPlayer.name,
        tag: selectedTag || undefined,
        isDeleted: false
      }

      setLogEntries(prev => [newLogEntry, ...prev])
       
       // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∞
       // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º recalculateGameStateWithData –∑–¥–µ—Å—å - —ç—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—é!
       // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
       console.log('‚úÖ –®—Ç—Ä–∞—Ñ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–≥:', newLogEntry)
       
       handleCloseScoreModal()
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞:', error)
      setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
    }
  }

  const handleEditLogEntry = (entry: LogEntry) => {
    setEditingLogEntry(entry)
    setIsEditLogModalOpen(true)
  }

  const handleUpdateLogEntry = (updatedEntry: LogEntry) => {
    setLogEntries(prev => prev.map(entry => 
      entry.id === updatedEntry.id ? updatedEntry : entry
    ))
    setIsEditLogModalOpen(false)
    setEditingLogEntry(null)
  }

  const handleDeleteLogEntry = async (entryId: string) => {
    if (!currentGame) return
    
    try {
      console.log('üéØ handleDeleteLogEntry: –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ:', entryId)
      
      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
      await gameService.deleteGameEvent(currentGame.id, entryId)
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setLogEntries(prev => {
        const updated = prev.map(entry => 
          entry.id === entryId 
            ? { ...entry, isDeleted: true }
            : entry
        )
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
        recalculateGameStateWithData(players, updated, session?.name || '')
        
        return updated
      })
      
      setIsEditLogModalOpen(false)
      setEditingLogEntry(null)
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error)
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
    }
  }

  const recalculateGameState = (entries?: LogEntry[]) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const logToUse = entries || logEntries
    
    // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ (–¥–µ–Ω—å–≥–∏ –∏–∑ API)
    const updatedPlayers = players.map(player => ({
      ...player,
      points: 0,                    // –û—á–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
      balls: [],                    // –®–∞—Ä—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
      fouls: [],                    // –®—Ç—Ä–∞—Ñ—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
      money: 0                      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –î–µ–Ω—å–≥–∏ —Ç–æ–∂–µ –Ω–∞—á–∏–Ω–∞–µ–º —Å 0!
    }))

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø–∏—Å—è–º –ª–æ–≥–∞ (–Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–º)
    const activeEntries = logToUse.filter(entry => !entry.isDeleted)
    
    activeEntries.forEach(entry => {
      const player = updatedPlayers.find(p => p.name === entry.playerName)
      if (!player) return

      if (entry.type === 'ball') {
        // –ù–∞—Ö–æ–¥–∏–º —à–∞—Ä –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        const ball = ballTypes.find(ball => 
          entry.description.toLowerCase().includes(ball.name.toLowerCase())
        )
        if (ball) {
          const newBall = { ...ball, id: entry.id, timestamp: entry.timestamp }
          ;(player.balls as Ball[]).push(newBall)
          player.points += ball.points
          // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –î–µ–Ω—å–≥–∏ = –æ—á–∫–∏ √ó —Å—Ç–æ–∏–º–æ—Å—Ç—å_–æ—á–∫–∞ (–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å –Ω—É–ª—è!)
          const pointsValue = getPointsValue(session?.name || '')
          player.money = player.points * pointsValue
        }
      } else if (entry.type === 'foul') {
        // –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ
        const newFoul: Foul = {
          id: entry.id,
          timestamp: entry.timestamp,
          tag: entry.tag
        }
        ;(player.fouls as Foul[]).push(newFoul)
        player.points -= 1
        // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –î–µ–Ω—å–≥–∏ –ù–ï –∏–∑–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ —à—Ç—Ä–∞—Ñ–µ!
        // player.money –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –æ—Ç —à–∞—Ä–æ–≤)
      }
    })

    setPlayers(updatedPlayers)
  }

  // üîÑ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const recalculateGameStateWithData = (initialPlayers: Player[], entries: LogEntry[], sessionName: string) => {
    console.log('üîÑ recalculateGameStateWithData: –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç')
    console.log('üîÑ recalculateGameStateWithData: initialPlayers:', initialPlayers)
    console.log('üîÑ recalculateGameStateWithData: entries:', entries)
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const updatedPlayers = initialPlayers.map(player => ({
      ...player,
      points: 0,                    // –û—á–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
      balls: [] as Ball[],          // –®–∞—Ä—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
      fouls: [] as Foul[],          // –®—Ç—Ä–∞—Ñ—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
      money: 0                      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –î–µ–Ω—å–≥–∏ —Ç–æ–∂–µ –Ω–∞—á–∏–Ω–∞–µ–º —Å 0!
    }))

    console.log('üîÑ recalculateGameStateWithData: updatedPlayers –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:', updatedPlayers)

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø–∏—Å—è–º –ª–æ–≥–∞ (–Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–º)
    const activeEntries = entries.filter(entry => !entry.isDeleted)
    
    activeEntries.forEach(entry => {
      console.log('üîÑ recalculateGameStateWithData: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ:', entry)
      const player = updatedPlayers.find(p => p.name === entry.playerName)
      if (!player) {
        console.log('‚ùå recalculateGameStateWithData: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è:', entry.playerName)
        return
      }

      if (entry.type === 'ball') {
        // –ù–∞—Ö–æ–¥–∏–º —à–∞—Ä –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        const ball = ballTypes.find(ball => 
          entry.description.toLowerCase().includes(ball.name.toLowerCase())
        )
        if (ball) {
          const newBall = { ...ball, id: entry.id, timestamp: entry.timestamp }
          ;(player.balls as Ball[]).push(newBall)
          player.points += ball.points
          // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –î–µ–Ω—å–≥–∏ = –æ—á–∫–∏ √ó —Å—Ç–æ–∏–º–æ—Å—Ç—å_–æ—á–∫–∞ (–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å –Ω—É–ª—è!)
          const pointsValue = getPointsValue(sessionName)
          player.money = player.points * pointsValue
          console.log('‚úÖ recalculateGameStateWithData: –î–æ–±–∞–≤–ª–µ–Ω —à–∞—Ä –¥–ª—è', player.name, '–æ—á–∫–∏:', player.points, '–¥–µ–Ω—å–≥–∏:', player.money, '—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—á–∫–∞:', pointsValue)
        }
      } else if (entry.type === 'foul') {
        // –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ
        const newFoul: Foul = {
          id: entry.id,
          timestamp: entry.timestamp,
          tag: entry.tag
        }
        ;(player.fouls as Foul[]).push(newFoul)
        player.points -= 1
        // –î–µ–Ω—å–≥–∏ –ù–ï –∏–∑–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ —à—Ç—Ä–∞—Ñ–µ!
        console.log('‚úÖ recalculateGameStateWithData: –î–æ–±–∞–≤–ª–µ–Ω —à—Ç—Ä–∞—Ñ –¥–ª—è', player.name, '–æ—á–∫–∏:', player.points)
      }
    })

    console.log('üîÑ recalculateGameStateWithData: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤:', updatedPlayers)
    setPlayers(updatedPlayers)
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º handleEndGame –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
  const handleEndGame = () => {
    console.log('üéØ handleEndGame: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∏–≥—Ä—ã:', currentGame?.id)
    console.log('üéØ handleEndGame: –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:', currentGame?.status)
    console.log('üéØ handleEndGame: –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞?', currentGame?.status === 'completed')
    
    if (currentGame?.status === 'completed') {
      console.log('‚ùå handleEndGame: –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ')
      return
    }
    
    // üîÑ –ü–û–ö–ê–ó–´–í–ê–ï–ú: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    // –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    setIsEndGameModalOpen(true)
  }

  const handleConfirmEndGame = async () => {
    if (!currentGame) return
    
    try {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ API
      const completionData: GameCompletionResponse = await gameService.completeGame(currentGame.id)
      
      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–µ—Å—Å–∏–∏!
      // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      setCurrentGame((prev: any) => ({
        ...prev,
        status: completionData.status,
        completed_at: completionData.completed_at,
        winner_participant_id: completionData.winner_participant_id,
        game_data: completionData.game_data
      }))
      
      // üîÑ –ü–û–ö–ê–ó–´–í–ê–ï–ú: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
      setShowGameResults(true)
      console.log('‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã:', err)
      setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã')
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setIsEndGameModalOpen(false)
      setShowGameResults(false)
    }
  }

  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const calculateFinalStatistics = (): GameResult => {
    if (!players.length) {
      throw new Error('–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const playerScores: PlayerScore[] = players.map(player => {
      const totalPoints = player.points
      const totalMoney = player.money
      const balls: Ball[] = player.balls || []
      const fouls: Foul[] = player.fouls || []
      
      return {
        player,
        totalPoints,
        totalMoney,
        balls,
        fouls,
        rank: 0 // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      }
    })

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    playerScores.sort((a, b) => b.totalPoints - a.totalPoints)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–Ω–≥–∏
    playerScores.forEach((score, index) => {
      score.rank = index + 1
    })

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–ø–µ—Ä–≤—ã–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
    const winner = playerScores[0].player

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã
    const totalBalls = playerScores.reduce((sum, score) => sum + score.balls.length, 0)
    const totalFouls = playerScores.reduce((sum, score) => sum + score.fouls.length, 0)
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
    const gameDuration = gameStartTime 
      ? formatGameDuration(gameStartTime, new Date())
      : '00:00'

    return {
      winner,
      finalScores: playerScores,
      totalBalls,
      totalFouls,
      gameDuration,
      completedAt: new Date().toISOString()
    }
  }

  const formatGameDuration = (startTime: Date, endTime: Date): string => {
    const durationMs = endTime.getTime() - startTime.getTime()
    const minutes = Math.floor(durationMs / (1000 * 60))
    const seconds = Math.floor((durationMs % (1000 * 60)) / 1000)
    
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
  }

  const getWinnerDisplayName = (): string => {
    try {
      const result = calculateFinalStatistics()
      return result.winner.name
    } catch (error) {
      return '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
    }
  }

  const getWinnerPoints = (): number => {
    try {
      const result = calculateFinalStatistics()
      return result.finalScores[0].totalPoints
    } catch (error) {
      return 0
    }
  }

  const getBallIcon = (ball: Ball) => (
    <div 
      className="w-7 h-7 rounded-full flex items-center justify-center shadow-lg"
      style={{ 
        backgroundColor: ball.color,
        boxShadow: `inset -2px -2px 6px rgba(0,0,0,0.3), inset 2px 2px 6px rgba(255,255,255,0.1), 0 4px 8px rgba(0,0,0,0.2)`
      }}
    />
  )

  const getFoulIcon = () => (
    <div className="w-8 h-8 flex items-center justify-center text-red-500 font-bold text-xl">
      ‚úï
    </div>
  )

  const getEventIcon = (entry: LogEntry) => {
    if (entry.type === 'ball') {
      // –ù–∞—Ö–æ–¥–∏–º —Ü–≤–µ—Ç —à–∞—Ä–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
      const ballColor = ballTypes.find(ball => 
        entry.description.toLowerCase().includes(ball.name.toLowerCase())
      )?.color || '#212121'
      
      return (
        <div 
          className="w-6 h-6 rounded-full shadow-md"
          style={{ backgroundColor: ballColor }}
        />
      )
    }
    
    if (entry.type === 'foul') {
      return <div className="text-red-500 text-xl">‚ùå</div>
    }
    
    if (entry.type === 'turn') {
      return <div className="text-blue-500 text-xl">üîÑ</div>
    }
    
    if (entry.type === 'game_start') {
      return <div className="text-green-500 text-xl">üéØ</div>
    }
    
    return <div className="text-gray-400 text-xl">‚ö´</div>
  }

  // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  if (isLoading) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-mint mx-auto mb-4"></div>
          <div className="text-xl text-mint">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</div>
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (error) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 text-xl mb-4">‚ùå –û—à–∏–±–∫–∞</div>
          <div className="text-gray-300 mb-6">{error}</div>
          <Button 
            color="primary" 
            onClick={() => {
              if (currentGame && currentGame.session_id) {
                navigate(`/game-session/${currentGame.session_id}`)
              } else {
                navigate('/dashboard')
              }
            }}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏
          </Button>
        </div>
      </div>
    )
  }

  return (
    <>
      {/* Header */}
      <GameHeader
        gameType={`${session?.name || '–ö–æ–ª—Ö–æ–∑'} - –ò–≥—Ä–∞ #${currentGame?.game_number || '1'}`}
        sessionId={session?.id || ''}
        playerCount={players.length}
        gameCount={1}
        sessionStatus={session?.status || 'waiting'}
        sessionCreatedAt={session?.created_at || new Date().toISOString()}
        sessionEndedAt={session?.ended_at}
        templateData={session?.template_id ? {
          paymentDirection: session.template?.rules?.payment_direction || '–ü–æ —á–∞—Å–æ–≤–æ–π',
          pointValueRubles: session.template?.rules?.point_value_rubles || 50,
          queueAlgorithm: session.template?.rules?.queue_algorithm || 'random_no_repeat',
          ballsToWin: session.template?.rules?.balls_to_win || 15
        } : undefined}
        onBack={handleBackToSession}
      />

      <div className="min-h-screen bg-black text-white">
        <main className="max-w-4xl mx-auto px-4 pb-20">
          {/* Game Completed Message - –ö–û–ú–ü–ê–ö–¢–ù–´–ô –ë–ê–ù–ù–ï–† –°–í–ï–†–•–£ */}
          {currentGame && currentGame.status === 'completed' && (
            <div className="bg-gradient-to-r from-mint/20 to-blue-500/20 border border-mint/30 rounded-lg p-4 mb-6 text-center">
              <div className="flex items-center justify-center gap-3 mb-3">
                <div className="text-2xl">üèÜ</div>
                <div className="text-lg font-bold text-mint">–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</div>
                <div className="text-2xl">üèÜ</div>
              </div>
              
              <div className="text-sm text-gray-300 mb-4">
                –ò–≥—Ä–∞ #{currentGame.game_number} –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                {currentGame.winner_participant_id && (
                  <span className="block mt-1">
                    –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {players.find(p => p.id === currentGame.winner_participant_id)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                  </span>
                )}
              </div>
              
              {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É */}
              <div className="flex justify-center gap-6 mb-4">
                {sortedPlayers.map((player) => {
                  const playerBalances = calculateFinalDebts
                  const playerBalance = playerBalances.find(p => p.name === player.name)?.balance || 0
                  
                  return (
                    <div key={player.id} className="bg-gray-800/80 border border-gray-600 rounded-lg px-4 py-2 text-center min-w-[120px]">
                      <div className="font-bold text-white text-sm mb-1">{player.name}</div>
                      <div className={`text-lg font-mono font-bold ${
                        playerBalance >= 0 ? 'text-green-400' : 'text-red-400'
                      }`}>
                        {playerBalance >= 0 ? '+' : ''}{playerBalance} ‚ÇΩ
                      </div>
                    </div>
                  )
                })}
              </div>
              
              <Button
                color="primary"
                variant="bordered"
                onClick={handleBackToSession}
                className="bg-gray-700 border-gray-500 text-white hover:bg-gray-600 text-sm"
                size="sm"
              >
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏
              </Button>
            </div>
          )}

          {/* Players Section */}
          <Card className="bg-gray-800 border border-gray-600 mb-6">
            <CardHeader className="pb-3">
              <h2 className="text-lg font-bold text-mint text-center w-full">–ò–≥—Ä–æ–∫–∏</h2>
            </CardHeader>
            <CardBody className="pt-0">
              {players.length === 0 ? (
                <div className="text-center py-8 text-gray-400">
                  <div className="text-lg mb-2">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...</div>
                  <div className="text-sm">–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è</div>
                </div>
              ) : (
                <div className="space-y-4">
                  {sortedPlayers.map((player) => (
                    <div key={player.id} className="flex items-center gap-4 p-4 bg-gray-700 rounded-lg">
                      <div className="flex items-center gap-4">
                        <Avatar 
                          name={player.avatar} 
                          className="bg-gradient-to-br from-coral to-peach text-white font-bold"
                        />
                        <div className="max-w-32">
                          <div className="font-bold text-white truncate">{player.name}</div>
                          <div className="text-sm text-mint">{player.points} –æ—á–∫–æ–≤</div>
                          <div className="text-xs text-gray-300">
                            {player.money >= 0 ? '+' : ''}{player.money} ‚ÇΩ
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-3 flex-wrap ml-4">
                        {/* –°–Ω–∞—á–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —à–∞—Ä—ã –∏ —à—Ç—Ä–∞—Ñ—ã –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
                        {[...player.balls, ...player.fouls].sort((a, b) => {
                          // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (timestamp)
                          // –î–ª—è —à–∞—Ä–æ–≤ –∏ —à—Ç—Ä–∞—Ñ–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                          const aTime = a.timestamp || '00:00'
                          const bTime = b.timestamp || '00:00'
                          
                          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                          const aMinutes = parseInt(aTime.split(':')[0]) || 0
                          const aSeconds = parseInt(aTime.split(':')[1]) || 0
                          const bMinutes = parseInt(bTime.split(':')[0]) || 0
                          const bSeconds = parseInt(bTime.split(':')[1]) || 0
                          
                          const aTotalSeconds = aMinutes * 60 + aSeconds
                          const bTotalSeconds = bMinutes * 60 + bSeconds
                          
                          // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–Ω—å—à–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                          return aTotalSeconds - bTotalSeconds
                        }).map((item) => (
                          <div key={item.id}>
                            {'type' in item ? getBallIcon(item as Ball) : getFoulIcon()}
                          </div>
                        ))}
                      </div>
                      
                      <div className="ml-auto">
                        {currentGame && currentGame.status !== 'completed' && (
                          <Button
                            isIconOnly
                            color="success"
                            variant="solid"
                            size="lg"
                            onClick={() => handleOpenScoreModal(player)}
                          >
                            <Plus size={20} />
                          </Button>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
          </CardBody>
        </Card>

        {/* Game Log */}
        <Card className="bg-gray-800 border border-gray-600 mb-6">
          <CardHeader className="pb-3">
            <h3 className="text-lg font-bold text-mint">–°–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã</h3>
          </CardHeader>
          <CardBody className="pt-0">
            {logEntries.length === 0 ? (
              <div className="text-center py-8 text-gray-400">
                <div className="text-lg mb-2">üìù –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç</div>
                <div className="text-sm">–°–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</div>
              </div>
            ) : (
              <div className="space-y-3 max-h-64 overflow-y-auto custom-scrollbar">
                {logEntries.map((entry) => (
                  <div key={entry.id} className={`flex justify-between items-start p-3 rounded-lg ${
                    entry.isDeleted 
                      ? 'bg-gray-600 border border-gray-500 opacity-60' 
                      : 'bg-gray-700'
                  }`}>
                    <div className="flex items-center gap-3 flex-1">
                      <div className="text-lg">
                        {getEventIcon(entry)}
                      </div>
                      <div className="flex-1">
                        <div className={`text-sm ${
                          entry.isDeleted ? 'text-gray-400 line-through' : 'text-white'
                        }`}>
                          {entry.isDeleted ? `${entry.description} (–£–î–ê–õ–ï–ù–û)` : entry.description}
                        </div>
                        {entry.tag && !entry.isDeleted && (
                          <Chip size="sm" variant="flat" className="mt-1">
                            {entry.tag}
                          </Chip>
                        )}
                        <div className="text-xs text-gray-400 mt-1">
                          –î–æ–±–∞–≤–∏–ª: {entry.addedBy}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ creator, —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ */}
                        {!entry.isDeleted && isCreator && currentGame && currentGame.status !== 'completed' && (
                          <Button
                            isIconOnly
                            size="sm"
                            variant="light"
                            className="text-gray-400 hover:text-white"
                            onClick={() => handleEditLogEntry(entry)}
                          >
                            <Edit2 size={16} />
                          </Button>
                        )}
                        <div className="text-xs text-gray-300 font-mono">
                          {entry.timestamp}
                        </div>
                      </div>
                  </div>
                ))}
              </div>
            )}
          </CardBody>
        </Card>

        {/* End Game Section */}
        {currentGame && currentGame.status !== 'completed' && (
          <Card className="bg-gray-800 border border-gray-600">
            <CardBody className="text-center">
              <Button
                color="danger"
                variant="bordered"
                size="lg"
                onClick={handleEndGame}
                className="w-full max-w-xs"
              >
                üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
              </Button>
            </CardBody>
          </Card>
        )}
        </main>
      </div>

      {/* Score Modal */}
      <Modal 
        isOpen={isScoreModalOpen} 
        onClose={handleCloseScoreModal}
        size="2xl"
        scrollBehavior="inside"
        classNames={{
          base: "bg-gray-800 border border-gray-600 rounded-xl",
          header: "bg-gray-800 text-white rounded-t-xl",
          body: "bg-gray-800 text-white",
          footer: "bg-gray-800 rounded-b-xl"
        }}
      >
        <ModalContent>
          <ModalHeader className="flex flex-col gap-1">
            <h3 className="text-xl font-bold text-white">–î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ - {selectedPlayer?.name}</h3>
          </ModalHeader>
          <ModalBody>
            <div className="space-y-6">
               {/* Ball Selection */}
               <div>
                 <h4 className="text-lg font-semibold text-mint mb-4">–ó–∞–±–∏—Ç—ã–π —à–∞—Ä</h4>
                 <div className="flex flex-wrap gap-8 justify-center">
                   {ballTypes.map((ball) => (
                     <Button
                       key={ball.id}
                       variant={selectedBall?.id === ball.id ? "solid" : "bordered"}
                       color={selectedBall?.id === ball.id ? "primary" : "default"}
                       isIconOnly
                       className={`!w-20 !h-20 !p-0 rounded-lg transition-all ${
                         selectedBall?.id === ball.id 
                           ? "bg-white text-black" 
                           : "bg-gray-700 border-gray-500 text-white hover:bg-gray-600"
                       }`}
                       onClick={() => handleSelectBall(ball)}
                     >
                       <div className="flex flex-col items-center gap-1">
                         <div 
                           className="w-6 h-6 rounded-full shadow-md"
                           style={{ 
                             backgroundColor: ball.color,
                             boxShadow: `inset -1px -1px 3px rgba(0,0,0,0.3), inset 1px 1px 3px rgba(255,255,255,0.1), 0 2px 4px rgba(0,0,0,0.2)`
                           }}
                         />
                         <div className={`text-xs font-medium ${
                           selectedBall?.id === ball.id ? "text-black" : "text-mint"
                         }`}>
                           +{ball.points}
                         </div>
                       </div>
                     </Button>
                   ))}
                   
                   {/* Foul Button */}
                   <Button
                     variant="bordered"
                     color="danger"
                     isIconOnly
                     className={`!w-20 !h-20 !p-0 rounded-lg ${
                       selectedBall === null && !selectedPlayer
                         ? "bg-red-600 text-white hover:bg-red-700" 
                         : "bg-gray-700 border-red-500 text-red-500 hover:bg-gray-600"
                     }`}
                     onClick={() => setSelectedBall(null)}
                   >
                     <div className="flex flex-col items-center gap-1">
                       <div className="w-6 h-6 flex items-center justify-center text-red-500 font-bold text-xl">
                         ‚úï
                       </div>
                       <div className="text-xs font-medium text-white">-1</div>
                     </div>
                   </Button>
                 </div>
               </div>

              <Divider className="bg-gray-600" />

              {/* Tag Selection */}
              <div>
                <h4 className="text-lg font-semibold text-mint mb-4">–¢–µ–≥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</h4>
                <div className="flex flex-wrap gap-3">
                  {tagOptions.map((tag) => (
                    <Chip
                      key={tag}
                      variant={selectedTag === tag ? "solid" : "bordered"}
                      color={selectedTag === tag ? "primary" : "default"}
                      className={`cursor-pointer px-4 py-2 ${
                        selectedTag === tag 
                          ? "bg-mint text-white" 
                          : "bg-gray-700 border-gray-500 text-white hover:bg-gray-600"
                      }`}
                      onClick={() => handleSelectTag(tag)}
                    >
                      {tag}
                    </Chip>
                  ))}
                </div>
              </div>

              {/* Custom Description */}
              <div>
                <Input
                  label="–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ..."
                  value={customDescription}
                                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCustomDescription(e.target.value)}
                  variant="bordered"
                  classNames={{
                    base: "bg-gray-700",
                    label: "text-white",
                    input: "text-white bg-gray-700 border-gray-500",
                    inputWrapper: "bg-gray-700 border-gray-500 hover:border-gray-400"
                  }}
                />
              </div>
            </div>
          </ModalBody>
          <ModalFooter className="flex justify-between">
            <Button 
              variant="bordered" 
              onPress={handleCloseScoreModal}
              className="bg-gray-700 border-gray-500 text-white hover:bg-gray-600"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              color="success" 
              onPress={selectedBall ? handleAddScore : handleAddFoul}
              isDisabled={!selectedBall && !selectedPlayer}
              className="bg-mint text-white hover:bg-green-600"
            >
              {selectedBall ? '–î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏' : '–î–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ'}
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* Edit Log Entry Modal */}
      <Modal 
        isOpen={isEditLogModalOpen} 
        onClose={() => setIsEditLogModalOpen(false)}
        size="lg"
        classNames={{
          base: "bg-gray-800 border border-gray-600 rounded-xl",
          header: "bg-gray-800 text-white rounded-t-xl",
          body: "bg-gray-800 text-white",
          footer: "bg-gray-800 rounded-b-xl"
        }}
      >
        <ModalContent>
          <ModalHeader>
            <h3 className="text-xl font-bold text-white">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ</h3>
          </ModalHeader>
          <ModalBody>
            {editingLogEntry && (
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-gray-300 mb-2 block">
                    –û–ø–∏—Å–∞–Ω–∏–µ
                  </label>
                  <Input
                    value={editingLogEntry.description}
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEditingLogEntry({
                      ...editingLogEntry,
                      description: e.target.value
                    })}
                    variant="bordered"
                    classNames={{
                      base: "bg-gray-700",
                      input: "text-white bg-gray-700 border-gray-500",
                      inputWrapper: "bg-gray-700 border-gray-500 hover:border-gray-400"
                    }}
                  />
                </div>
                
                <div>
                  <label className="text-sm font-medium text-gray-300 mb-2 block">
                    –¢–µ–≥
                  </label>
                  <div className="flex flex-wrap gap-2">
                    {tagOptions.map((tag) => (
                      <Button
                        key={tag}
                        size="sm"
                        variant={editingLogEntry.tag === tag ? "solid" : "bordered"}
                        color={editingLogEntry.tag === tag ? "primary" : "default"}
                        className={`px-3 py-1 ${
                          editingLogEntry.tag === tag 
                            ? "bg-mint text-white" 
                            : "bg-gray-700 border-gray-500 text-white hover:bg-gray-600"
                        }`}
                        onClick={() => setEditingLogEntry({
                          ...editingLogEntry,
                          tag: editingLogEntry.tag === tag ? undefined : tag
                        })}
                      >
                        {tag}
                      </Button>
                    ))}
                  </div>
                </div>

                <div className="flex items-center gap-4 text-sm text-gray-400">
                  <span>–ò–≥—Ä–æ–∫: {editingLogEntry.playerName}</span>
                  <span>–û—á–∫–∏: {editingLogEntry.points}</span>
                  <span>–í—Ä–µ–º—è: {editingLogEntry.timestamp}</span>
                </div>
              </div>
            )}
          </ModalBody>
          <ModalFooter className="flex justify-between">
            {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è creator */}
            {isCreator && (
              <Button 
                color="danger" 
                variant="bordered"
                onPress={() => editingLogEntry && handleDeleteLogEntry(editingLogEntry.id)}
                className="bg-gray-700 border-red-500 text-red-500 hover:bg-gray-600"
              >
                –£–¥–∞–ª–∏—Ç—å
              </Button>
            )}
            
            <div className="flex gap-2">
              <Button 
                variant="bordered" 
                onPress={() => setIsEditLogModalOpen(false)}
                className="bg-gray-700 border-gray-500 text-white hover:bg-gray-600"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è creator */}
              {isCreator && (
                <Button 
                  color="success" 
                  onPress={() => editingLogEntry && handleUpdateLogEntry(editingLogEntry)}
                  className="bg-mint text-white hover:bg-green-600"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              )}
            </div>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* End Game Modal */}
      <Modal 
        isOpen={isEndGameModalOpen} 
        onClose={() => setIsEndGameModalOpen(false)}
        size="2xl"
        classNames={{
          base: "bg-gray-800 border border-gray-600 rounded-xl",
          header: "bg-gray-800 text-white rounded-t-xl",
          body: "bg-gray-800 text-white",
          footer: "bg-gray-800 rounded-b-xl"
        }}
      >
        <ModalContent>
          <ModalHeader className="text-center">
            <h3 className="text-2xl font-bold text-white">
              {showGameResults ? 'üéØ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É?'}
            </h3>
          </ModalHeader>
          <ModalBody>
            {!showGameResults ? (
              // üîÑ –ü–û–ö–ê–ó–´–í–ê–ï–ú: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
              <div className="text-center">
                <div className="text-6xl mb-4">üéØ</div>
                <p className="text-gray-300 text-lg">
                  –ò–≥—Ä–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. 
                  –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã —É–≤–∏–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
                </p>
              </div>
            ) : (
              // üîÑ –ü–û–ö–ê–ó–´–í–ê–ï–ú: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
              <>
                {/* –ü–æ–±–µ–¥–∏—Ç–µ–ª—å */}
                <div className="text-center mb-6">
                  <div className="bg-gradient-to-r from-yellow-400 to-yellow-600 text-black px-6 py-3 rounded-lg inline-block">
                    <div className="text-lg font-semibold">üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å</div>
                    <div className="text-2xl font-bold">{getWinnerDisplayName()}</div>
                    <div className="text-sm opacity-80">{getWinnerPoints()} –æ—á–∫–æ–≤</div>
                  </div>
                </div>

                {/* –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <div className="space-y-4">
                  <h4 className="text-lg font-semibold text-center text-gray-300 mb-4">
                    üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                  </h4>
                  
                  {/* –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
                  <div className="bg-gray-700 rounded-lg p-4">
                    <div className="grid grid-cols-5 gap-2 text-sm font-medium text-gray-400 mb-2">
                      <div>–ú–µ—Å—Ç–æ</div>
                      <div>–ò–≥—Ä–æ–∫</div>
                      <div>–û—á–∫–∏</div>
                      <div>–î–µ–Ω—å–≥–∏</div>
                      <div>–®–∞—Ä—ã</div>
                    </div>
                    
                    {(() => {
                      try {
                        const result = calculateFinalStatistics()
                        return result.finalScores.map((score, index) => (
                          <div 
                            key={score.player.id}
                            className={`grid grid-cols-5 gap-2 py-2 px-2 rounded ${
                              index === 0 
                                ? 'bg-yellow-500/20 border border-yellow-500/30' 
                                : 'bg-gray-600/50'
                            }`}
                          >
                            <div className="text-center">
                              {index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}`}
                            </div>
                            <div className="font-medium">{score.player.name}</div>
                            <div className="text-center">{score.totalPoints}</div>
                            <div className="text-center">{score.totalMoney}‚ÇΩ</div>
                            <div className="text-center">{score.balls.length}</div>
                          </div>
                        ))
                      } catch (error) {
                        return <div className="text-gray-400 text-center py-4">–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>
                      }
                    })()}
                  </div>

                  {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã */}
                  <div className="grid grid-cols-2 gap-4 text-center">
                    <div className="bg-gray-700 rounded-lg p-3">
                      <div className="text-2xl text-blue-400">üé±</div>
                      <div className="text-sm text-gray-400">–í—Å–µ–≥–æ —à–∞—Ä–æ–≤</div>
                      <div className="text-lg font-semibold">
                        {(() => {
                          try {
                            const result = calculateFinalStatistics()
                            return result.totalBalls
                          } catch (error) {
                            return 0
                          }
                        })()}
                      </div>
                    </div>
                    
                    <div className="bg-gray-700 rounded-lg p-3">
                      <div className="text-2xl text-red-400">‚ùå</div>
                      <div className="text-sm text-gray-400">–í—Å–µ–≥–æ —à—Ç—Ä–∞—Ñ–æ–≤</div>
                      <div className="text-lg font-semibold">
                        {(() => {
                          try {
                            const result = calculateFinalStatistics()
                            return result.totalFouls
                          } catch (error) {
                            return 0
                          }
                        })()}
                      </div>
                    </div>
                  </div>

                  {/* –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã */}
                  <div className="text-center">
                    <div className="text-sm text-gray-400">‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã</div>
                    <div className="text-lg font-semibold text-mint">
                      {(() => {
                        try {
                          const result = calculateFinalStatistics()
                          return result.gameDuration
                        } catch (error) {
                          return '00:00'
                        }
                      })()}
                    </div>
                  </div>
                </div>
              </>
            )}
          </ModalBody>
          <ModalFooter className="flex justify-between">
            {!showGameResults ? (
              // üîÑ –ü–û–ö–ê–ó–´–í–ê–ï–ú: –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
              <>
                <Button 
                  variant="bordered" 
                  onPress={() => setIsEndGameModalOpen(false)}
                  className="bg-gray-700 border-gray-500 text-white hover:bg-gray-600"
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button 
                  color="danger" 
                  onPress={handleConfirmEndGame}
                  className="bg-red-600 text-white hover:bg-red-700"
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
                </Button>
              </>
            ) : (
              // üîÑ –ü–û–ö–ê–ó–´–í–ê–ï–ú: –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
              <>
                <Button 
                  variant="bordered" 
                  onPress={() => {
                    setIsEndGameModalOpen(false)
                    setShowGameResults(false)
                  }}
                  className="bg-gray-700 border-gray-500 text-white hover:bg-gray-600"
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </Button>
                
                <div className="flex gap-2">
                  <Button 
                    color="primary" 
                    variant="bordered"
                    onPress={() => {
                      setIsEndGameModalOpen(false)
                      setShowGameResults(false)
                      if (session?.id) {
                        navigate(`/game-session/${session.id}`)
                      }
                    }}
                    className="bg-gray-700 border-blue-500 text-blue-400 hover:bg-gray-600"
                  >
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏
                  </Button>
                  
                  <Button 
                    color="success" 
                    onPress={() => {
                      setIsEndGameModalOpen(false)
                      setShowGameResults(false)
                      if (session?.id) {
                        navigate(`/session/create/${session.id}`)
                      }
                    }}
                    className="bg-green-600 text-white hover:bg-green-700"
                  >
                    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
                  </Button>
                </div>
              </>
            )}
          </ModalFooter>
        </ModalContent>
      </Modal>
    </>
  )
}
