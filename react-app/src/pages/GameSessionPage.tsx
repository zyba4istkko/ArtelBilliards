import React, { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { 
  GameHeader, 
  Scoreboard, 
  GameHistory, 
  ActionPanel, 
  GameControls,
  ScoreModal,
  PlayerCard,
  EndGameModal,
  GamePlayersSummary,
  SessionStatisticsCard
} from '../components/ui'
import { SessionService } from '../api/services/sessionService'
import { gameService } from '../api/services/gameService'
import { TemplateService } from '../api/services/templateService' // Added import for TemplateService
import type { GameSession, Game } from '../api/types'

interface Player {
  id: string
  name: string
  avatar: string
  points: number
  money: number
  balls: Array<{
    color: string
    name: string
    points: number
  }>
  fouls: number
}

export default function GameSessionPage() {
  const { sessionId } = useParams<{ sessionId: string }>()
  const navigate = useNavigate()
  
  // Loading states
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentGame, setCurrentGame] = useState<any>(null)
  const [session, setSession] = useState<any>(null)
  const [games, setGames] = useState<any[]>([])
  const [isLoadingGames, setIsLoadingGames] = useState(false)  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä
  
  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏
  const [sessionStatistics, setSessionStatistics] = useState<Record<string, {
    totalPoints: number
    totalBalls: number
    totalFouls: number
    totalEarned: number
    totalPaid: number
    netBalance: number
    gamesPlayed: number
    wins: number
  }>>({})
  
  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
  const [gamePlayersData, setGamePlayersData] = useState<Record<string, any[]>>({})
  
  // Game state
  const [isPaused, setIsPaused] = useState(false)
  const [gameStartTime] = useState(Date.now())
  const [currentGameNumber, setCurrentGameNumber] = useState(1)
  const [currentTime, setCurrentTime] = useState(Date.now())
  
  // Players state (transformed from API data)
  const [players, setPlayers] = useState<Player[]>([])

  // Modal states
  const [isScoreModalOpen, setIsScoreModalOpen] = useState(false)
  const [isEndGameModalOpen, setIsEndGameModalOpen] = useState(false)
  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null)

  // Load session data on component mount
  useEffect(() => {
    if (sessionId) {
      loadSessionData()
    }
  }, [sessionId])

  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(Date.now())
    }, 1000)
    
    return () => clearInterval(interval)
  }, [])

  // üîÑ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
  const loadGamePlayersData = async (gameId: string, gameData?: any) => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã
      const gameEvents = await gameService.getGameEvents(gameId)
      console.log(`üéÆ GameSessionPage: –°–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã ${gameId}:`, gameEvents)
      
      // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
      const participants = await SessionService.getSessionPlayers(sessionId!)
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
      const gamePlayers: Record<string, {
        id: string
        name: string
        avatar: string
        points: number
        money: number
        netBalance: number
        balls: Array<{
          id: string
          type: string
          points: number
          name: string
          color: string
          timestamp: string
        }>
        fouls: Array<{
          id: string
          timestamp: string
        }>
      }> = {}
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤
      participants.forEach(participant => {
        gamePlayers[participant.id] = {
          id: participant.id,
          name: participant.display_name,
          avatar: participant.display_name.charAt(0).toUpperCase(),
          points: 0,
          money: 0,
          netBalance: 0,
          balls: [],
          fouls: []
        }
      })
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã
      gameEvents.forEach((event: any) => {
        const participantId = event.participant_id
        if (gamePlayers[participantId]) {
          if (event.event_type === 'shot') {
            // –ó–∞–±–∏—Ç—ã–π —à–∞—Ä
            const eventData = event.event_data
            if (eventData && eventData.points) {
              const ball = {
                id: event.id,
                type: eventData.ball_type || 'white',
                points: eventData.points,
                name: eventData.ball_name || '–®–∞—Ä',
                color: '#ffffff', // –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
                timestamp: eventData.timestamp || '00:00'
              }
              
              gamePlayers[participantId].balls.push(ball)
              gamePlayers[participantId].points += eventData.points
              gamePlayers[participantId].money += eventData.points * 50 // 50‚ÇΩ –∑–∞ –æ—á–∫–æ
            }
          } else if (event.event_type === 'foul') {
            // –®—Ç—Ä–∞—Ñ
            const eventData = event.event_data
            const foul = {
              id: event.id,
              timestamp: eventData?.timestamp || '00:00'
            }
            
            gamePlayers[participantId].fouls.push(foul)
            gamePlayers[participantId].points -= 1
            gamePlayers[participantId].money -= 50 // 50‚ÇΩ –∑–∞ —à—Ç—Ä–∞—Ñ
          }
        }
      })
      
      // üîÑ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú: –ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (netBalance)
      // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º current_queue –∏–∑ –∏–≥—Ä—ã, –∞ –Ω–µ queue_position –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å current_queue
      // –ï—Å–ª–∏ gameData –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—â–µ–º –≤ –º–∞—Å—Å–∏–≤–µ games
      let gameInfo = gameData
      if (!gameInfo) {
        gameInfo = games.find(g => g.id === gameId)
      }
      
      if (!gameInfo) {
        console.error(`üéÆ GameSessionPage: –ò–≥—Ä–∞ ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä`)
        console.error(`üéÆ GameSessionPage: gameData:`, gameData)
        console.error(`üéÆ GameSessionPage: games.length:`, games.length)
        console.error(`üéÆ GameSessionPage: games IDs:`, games.map(g => g.id))
        return []
      }
      
      console.log(`üéÆ GameSessionPage: –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã ${gameId}:`, gameInfo)
      console.log(`üéÆ GameSessionPage: game_data –∏–≥—Ä—ã:`, gameInfo.game_data)
      
      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ò—â–µ–º current_queue –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ - game_data
      let currentQueue = gameInfo.current_queue
      if (!currentQueue && gameInfo.game_data) {
        currentQueue = gameInfo.game_data.current_queue
        console.log(`üéÆ GameSessionPage: current_queue –Ω–∞–π–¥–µ–Ω –≤ game_data:`, currentQueue)
      }
      
      console.log(`üéÆ GameSessionPage: current_queue –∏–≥—Ä—ã:`, currentQueue)
      
      let sortedParticipants = [...participants]
      
      if (currentQueue && currentQueue.length > 0) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ current_queue –∏–≥—Ä—ã
        let queueOrder = currentQueue
        
        // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ current_queue —ç—Ç–æ –º–∞—Å—Å–∏–≤
        if (typeof queueOrder === 'string') {
          try {
            queueOrder = JSON.parse(queueOrder)
            console.log(`üéÆ GameSessionPage: current_queue —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –∏–∑ JSON:`, queueOrder)
          } catch (e) {
            console.error(`üéÆ GameSessionPage: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ current_queue:`, e)
            queueOrder = []
          }
        }
        
        console.log(`üéÆ GameSessionPage: queueOrder –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:`, queueOrder)
        console.log(`üéÆ GameSessionPage: participants –¥–ª—è –ø–æ–∏—Å–∫–∞:`, participants.map(p => ({ id: p.id, name: p.display_name })))
        
        sortedParticipants = queueOrder.map(participantId => {
          const found = participants.find(p => p.id === participantId)
          console.log(`üéÆ GameSessionPage: –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${participantId}:`, found ? found.display_name : '–ù–ï –ù–ê–ô–î–ï–ù')
          return found
        }).filter(Boolean) as any[]
        
        console.log(`üéÆ GameSessionPage: –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ current_queue –∏–≥—Ä—ã:`, 
          sortedParticipants.map(p => `${p.display_name} (${p.id})`))
      } else {
        // Fallback: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ queue_position –µ—Å–ª–∏ current_queue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        sortedParticipants.sort((a, b) => (a.queue_position || 0) - (b.queue_position || 0))
        console.log(`üéÆ GameSessionPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ queue_position`)
      }
      
      for (let i = 0; i < sortedParticipants.length; i++) {
        const currentParticipant = sortedParticipants[i]
        const nextParticipant = sortedParticipants[i === sortedParticipants.length - 1 ? 0 : i + 1]
        
        const currentPoints = gamePlayers[currentParticipant.id]?.points || 0
        const nextPoints = gamePlayers[nextParticipant.id]?.points || 0
        
        // –¢–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –∑–∞ —Å–≤–æ–∏ –æ—á–∫–∏
        const earnedFromPrev = currentPoints * 50 // 50‚ÇΩ –∑–∞ –æ—á–∫–æ
        // –¢–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–ª–∞—Ç–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞ –µ–≥–æ –æ—á–∫–∏  
        const paidToNext = nextPoints * 50
        
        // –ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const netBalance = earnedFromPrev - paidToNext
        
        console.log(`üéÆ ${currentParticipant.display_name}: –ø–æ–ª—É—á–∞–µ—Ç ${earnedFromPrev}‚ÇΩ, –ø–ª–∞—Ç–∏—Ç ${paidToNext}‚ÇΩ, –∏—Ç–æ–≥–æ: ${netBalance}‚ÇΩ`)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º netBalance
        if (gamePlayers[currentParticipant.id]) {
          gamePlayers[currentParticipant.id].netBalance = netBalance
        }
      }
      
      // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      // –∞ –Ω–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ Object.values()
      return sortedParticipants.map(participant => gamePlayers[participant.id]).filter(Boolean)
    } catch (error) {
      console.error(`‚ùå GameSessionPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã ${gameId}:`, error)
      return []
    }
  }

  // üîÑ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—á–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∏–≥—Ä–∞–º
  const calculateSessionStatistics = async (games: any[], participants: any[]) => {
    const stats: Record<string, {
      totalPoints: number
      totalBalls: number
      totalFouls: number
      totalEarned: number
      totalPaid: number
      netBalance: number
      gamesPlayed: number
      wins: number
    }> = {}

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants.forEach(participant => {
      stats[participant.id] = {
        totalPoints: 0,
        totalBalls: 0,
        totalFouls: 0,
        totalEarned: 0,
        totalPaid: 0,
        netBalance: 0,
        gamesPlayed: 0,
        wins: 0
      }
    })

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∏–≥—Ä–∞–º
    for (const game of games) {
      if (game.status === 'completed') {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants.forEach(participant => {
          stats[participant.id].gamesPlayed++
        })

        // –ï—Å–ª–∏ –µ—Å—Ç—å winner_participant_id, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–±–µ–¥
        if (game.winner_participant_id && stats[game.winner_participant_id]) {
          stats[game.winner_participant_id].wins++
        }

        // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        try {
          const gameEvents = await gameService.getGameEvents(game.id)
          console.log(`üìä GameSessionPage: –°–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã ${game.id}:`, gameEvents)
          
          // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∫ –≤ ActiveGamePage
          // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
          const participantEvents: Record<string, { points: number, fouls: number }> = {}
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          participants.forEach(participant => {
            participantEvents[participant.id] = { points: 0, fouls: 0 }
          })
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã
          gameEvents.forEach((event: any) => {
            const participantId = event.participant_id
            if (participantEvents[participantId]) {
              if (event.event_type === 'shot') {
                // –ó–∞–±–∏—Ç—ã–π —à–∞—Ä
                const eventData = event.event_data
                if (eventData && eventData.points) {
                  participantEvents[participantId].points += eventData.points
                  stats[participantId].totalPoints += eventData.points
                  stats[participantId].totalBalls++
                }
              } else if (event.event_type === 'foul') {
                // –®—Ç—Ä–∞—Ñ
                participantEvents[participantId].fouls += 1
                stats[participantId].totalFouls++
                stats[participantId].totalPoints -= 1
              }
            }
          })
          
          // üîÑ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú: –ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
          // –õ–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ ActiveGamePage: –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞ –µ–≥–æ –æ—á–∫–∏
          const sortedParticipants = [...participants].sort((a, b) => {
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –ø–æ ID
            return (a.queue_position || 0) - (b.queue_position || 0)
          })
          
          for (let i = 0; i < sortedParticipants.length; i++) {
            const currentParticipant = sortedParticipants[i]
            const nextParticipant = sortedParticipants[i === sortedParticipants.length - 1 ? 0 : i + 1]
            
            const currentPoints = participantEvents[currentParticipant.id]?.points || 0
            const nextPoints = participantEvents[nextParticipant.id]?.points || 0
            
            // –¢–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –∑–∞ —Å–≤–æ–∏ –æ—á–∫–∏
            const earnedFromPrev = currentPoints * 50 // 50‚ÇΩ –∑–∞ –æ—á–∫–æ
            // –¢–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–ª–∞—Ç–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞ –µ–≥–æ –æ—á–∫–∏  
            const paidToNext = nextPoints * 50
            
            // –ß–∏—Å—Ç—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            const netBalance = earnedFromPrev - paidToNext
            
            console.log(`üìä ${currentParticipant.display_name}: –ø–æ–ª—É—á–∞–µ—Ç ${earnedFromPrev}‚ÇΩ, –ø–ª–∞—Ç–∏—Ç ${paidToNext}‚ÇΩ, –∏—Ç–æ–≥–æ: ${netBalance}‚ÇΩ`)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats[currentParticipant.id].totalEarned += earnedFromPrev
            stats[currentParticipant.id].totalPaid += paidToNext
            stats[currentParticipant.id].netBalance += netBalance
          }
          
        } catch (error) {
          console.error(`‚ùå GameSessionPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã ${game.id}:`, error)
        }
      }
    }

    return stats
  }

  // Load session data from API
  const loadSessionData = async () => {
    if (!sessionId) return
    
    try {
      setIsLoading(true)
      setError(null)
      
      // Load session details
      const sessionData = await SessionService.getSession(sessionId)
      
      // Load template data if available
      if (sessionData?.template_id) {
        try {
          const template = await TemplateService.getTemplate(sessionData.template_id)
          sessionData.template = template
        } catch (templateError) {
          console.error('‚ùå GameSessionPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞:', templateError)
        }
      }
      
      setSession(sessionData)
      
      // Load session players
      const playersData = await SessionService.getSessionPlayers(sessionId)
      
      // Transform API data to Player format for UI
      const transformedPlayers: Player[] = playersData.map((sp) => ({
        id: sp.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º sp.id –≤–º–µ—Å—Ç–æ sp.user_id –¥–ª—è –±–æ—Ç–æ–≤
        name: sp.display_name,
        avatar: sp.display_name.charAt(0).toUpperCase(),
        points: sp.current_score || 0,
        money: (sp.session_balance_rubles || 0) * 10, // Convert to game currency
        balls: [], // TODO: Add balls from game events
        fouls: 0   // TODO: Add fouls from game events
      }))
      setPlayers(transformedPlayers)
      
      // Load games data
      try {
        setIsLoadingGames(true)  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä
        console.log('üéÆ GameSessionPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId)
        const gamesData = await gameService.getSessionGames(sessionId)
        console.log('üéÆ GameSessionPage: –ü–æ–ª—É—á–µ–Ω—ã –∏–≥—Ä—ã –æ—Ç API:', gamesData)
        console.log('üéÆ GameSessionPage: –¢–∏–ø gamesData:', typeof gamesData)
        console.log('üéÆ GameSessionPage: gamesData.length:', gamesData?.length)
        
        if (gamesData && Array.isArray(gamesData)) {
          console.log('üéÆ GameSessionPage: –ò–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', gamesData.length)
          setGames(gamesData)
          
          // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          const sessionStats = await calculateSessionStatistics(gamesData, playersData)
          console.log('üìä GameSessionPage: –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:', sessionStats)
          setSessionStatistics(sessionStats)
          
          // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä
          const completedGames = gamesData.filter(game => game.status === 'completed')
          console.log('üéÆ GameSessionPage: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', completedGames.length)
          
          for (const game of completedGames) {
            try {
              console.log('üéÆ GameSessionPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã:', game.id)
              const playersData = await loadGamePlayersData(game.id, game)
              setGamePlayersData(prev => ({
                ...prev,
                [game.id]: playersData
              }))
              console.log('üéÆ GameSessionPage: –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –∏–≥—Ä—ã:', game.id, playersData)
            } catch (error) {
              console.error(`‚ùå GameSessionPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã ${game.id}:`, error)
            }
          }
        } else {
          console.log('üéÆ GameSessionPage: gamesData –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤')
          console.log('üéÆ GameSessionPage: gamesData —Ç–∏–ø:', typeof gamesData)
          console.log('üéÆ GameSessionPage: gamesData —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', gamesData)
          setGames([])
        }
      } catch (gamesError) {
        console.error('‚ùå GameSessionPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä:', gamesError)
        setGames([])
      } finally {
        setIsLoadingGames(false)  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –∫–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä
      }
      
    } catch (err: any) {
      console.error('Failed to load session data:', err)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏')
    } finally {
      setIsLoading(false)
    }
  }

  // Game controls
  const handlePause = () => setIsPaused(true)
  const handleResume = () => setIsPaused(false)
  
  const handleEndGame = () => {
    setIsEndGameModalOpen(true)
  }

  const handleNextGame = async () => {
    // Create new game in session
    if (sessionId) {
      try {
        console.log('üéÆ GameSessionPage: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ —Å–µ—Å—Å–∏–∏...')
        console.log('üéÆ GameSessionPage: sessionId:', sessionId)
        
        // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–æ–ª—É—á–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å–µ—Å—Å–∏–∏
        let queueAlgorithm = 'random_no_repeat' // fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if (session?.template_id) {
          try {
            console.log('üéÆ GameSessionPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏...')
            const template = await TemplateService.getTemplate(session.template_id)
            if (template?.rules?.queue_algorithm) {
              queueAlgorithm = template.rules.queue_algorithm
              console.log('üéÆ GameSessionPage: –ê–ª–≥–æ—Ä–∏—Ç–º –∏–∑ —à–∞–±–ª–æ–Ω–∞:', queueAlgorithm)
            } else {
              console.log('üéÆ GameSessionPage: –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —à–∞–±–ª–æ–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', queueAlgorithm)
            }
          } catch (templateError) {
            console.error('‚ùå GameSessionPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞:', templateError)
            console.log('üéÆ GameSessionPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–ª–≥–æ—Ä–∏—Ç–º:', queueAlgorithm)
          }
        } else {
          console.log('üéÆ GameSessionPage: –ù–µ—Ç template_id –≤ —Å–µ—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', queueAlgorithm)
        }
        
        // Create game with algorithm from template
        const newGame = await gameService.createGame(sessionId, {
          queue_algorithm: queueAlgorithm
        })
        
        console.log('üéÆ GameSessionPage: –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', newGame)
        console.log('üéÆ GameSessionPage: –¢–∏–ø newGame:', typeof newGame)
        console.log('üéÆ GameSessionPage: newGame.id:', newGame?.id)
        
        if (newGame && newGame.id) {
          console.log('üéÆ GameSessionPage: –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä')
          // Refresh games list
          await loadSessionData()
          // Navigate to the new game's page
          navigate(`/active-game/${newGame.id}`)  // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: /game/ -> /active-game/
        } else {
          console.log('üéÆ GameSessionPage: –ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (newGame undefined –∏–ª–∏ –±–µ–∑ ID)')
        }
      } catch (error) {
        console.error('‚ùå GameSessionPage: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error)
      }
    }
  }

  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏–≥—Ä–µ
  const handleGameClick = async (gameId: string) => {
    console.log('üéÆ GameSessionPage: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ:', gameId)
    
    // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
    const game = games.find(g => g.id === gameId)
    if (game && game.status === 'completed' && !gamePlayersData[gameId]) {
      try {
        console.log('üéÆ GameSessionPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã:', gameId)
        const playersData = await loadGamePlayersData(gameId)
        setGamePlayersData(prev => ({
          ...prev,
          [gameId]: playersData
        }))
        console.log('üéÆ GameSessionPage: –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', playersData)
      } catch (error) {
        console.error('‚ùå GameSessionPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', error)
      }
    }
    
    navigate(`/active-game/${gameId}`)  // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: /game/ -> /active-game/
  }

  const handleAddScore = (player: Player) => {
    setSelectedPlayer(player)
    setIsScoreModalOpen(true)
  }

  const handleScoreConfirm = (action: 'ball' | 'foul', ball?: any, tag?: string) => {
    if (!selectedPlayer) return

    setPlayers(prev => prev.map(p => {
      if (p.id === selectedPlayer.id) {
        if (action === 'ball' && ball) {
          const newBalls = [...p.balls, ball]
          const newPoints = p.points + ball.points
          const newMoney = p.money + (ball.points * 10)
          
          // Add log entry
          let logText = `${p.name} –∑–∞–±–∏–ª ${ball.name.toLowerCase()} —à–∞—Ä (+${ball.points})`
          if (tag) logText += ` [${tag}]`
          // addLogEntry(logText, '‚ö´', getBallColor(ball.name), p.name)

          return {
            ...p,
            points: newPoints,
            money: newMoney,
            balls: newBalls
          }
        } else if (action === 'foul') {
          const newPoints = p.points - 1
          const newMoney = p.money - 50
          const newFouls = p.fouls + 1
          
          // Add log entry
          let logText = `${p.name} —Å–æ–≤–µ—Ä—à–∏–ª —à—Ç—Ä–∞—Ñ (-1, -50‚ÇΩ)`
          if (tag) logText += ` [${tag}]`
          // addLogEntry(logText, '‚ùå', '#ef4444', p.name)

          return {
            ...p,
            points: newPoints,
            money: newMoney,
            fouls: newFouls
          }
        }
      }
      return p
    }))

    // Update current game in games array
    setGames(prev => prev.map(game => {
      if (game.status === 'in_progress') {
        return {
          ...game,
          players: players.map(p => {
            if (p.id === selectedPlayer.id) {
              if (action === 'ball' && ball) {
                return { ...p, balls: [...p.balls, ball] }
              } else if (action === 'foul') {
                return { ...p, fouls: p.fouls + 1 }
              }
            }
            return p
          })
        }
      }
      return game
    }))
  }

  // const addLogEntry = (text: string, icon: string, color?: string, addedBy: string = '–°–∏—Å—Ç–µ–º–∞') => {
  //   const now = new Date()
  //   const timeString = `${now.getHours()}:${now.getMinutes().toString().padStart(2, '0')}`
    
  //   const newEntry: LogEntry = {
  //     id: Date.now().toString(),
  //     text,
  //     icon,
  //     color,
  //     playerName: selectedPlayer?.name || '',
  //     timestamp: timeString,
  //     addedBy,
  //     canEdit: addedBy !== '–°–∏—Å—Ç–µ–º–∞'
  //   }

  //   setLogEntries(prev => [newEntry, ...prev.slice(0, 14)]) // Keep max 15 entries
  // }

  // const getBallColor = (ballName: string) => {
  //   const colors: Record<string, string> = {
  //     '–ö—Ä–∞—Å–Ω—ã–π': '#f44336',
  //     '–ñ–µ–ª—Ç—ã–π': '#ffeb3b',
  //     '–ó–µ–ª–µ–Ω—ã–π': '#4caf50',
  //     '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π': '#8d6e63',
  //     '–°–∏–Ω–∏–π': '#2196f3',
  //     '–†–æ–∑–æ–≤—ã–π': '#e91e63',
  //     '–ß–µ—Ä–Ω—ã–π': '#212121',
  //     '–ë–µ–ª—ã–π': '#ffffff'
  //   }
  //   return colors[ballName] || '#ffffff'
  // }

  // const handleEditLogEntry = (entryId: string) => {
  //   // Find the entry and open score modal for the player
  //   const entry = logEntries.find(e => e.id === entryId)
  //   if (entry) {
  //     const player = players.find(p => p.name === entry.playerName)
  //     if (player) {
  //       setSelectedPlayer(player)
  //       setIsScoreModalOpen(true)
  //     }
  //   }
  // }

  const handleBackToSession = () => {
    navigate('/session')
  }

  const handleConfirmEndGame = () => {
    // Logic for ending the game
    setIsEndGameModalOpen(false)
    // Navigate back to session
    navigate('/session')
  }



  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-mint mx-auto mb-4"></div>
          <p className="text-mint text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏...</p>
        </div>
      </div>
    )
  }

  // Error state
  if (error) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-500 text-lg mb-4">{error}</p>
          <button 
            onClick={loadSessionData}
            className="bg-mint text-black px-6 py-2 rounded-lg hover:bg-mint/80"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    )
  }

  // No session data
  if (!session) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-500 text-lg">–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
          <button 
            onClick={() => navigate('/dashboard')}
            className="bg-mint text-black px-6 py-2 rounded-lg hover:bg-mint/80 mt-4"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ dashboard
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Game Header */}
      <GameHeader
        gameType={session.name || '–ò–≥—Ä–∞'}
        sessionId={session.id}
        playerCount={session.current_players_count}
        gameCount={games?.length || 0}
        sessionStatus={session.status}
        sessionCreatedAt={session.created_at}
        sessionEndedAt={session.ended_at}
        templateData={session.template_id ? {
          paymentDirection: session.template?.rules?.payment_direction || '–ü–æ —á–∞—Å–æ–≤–æ–π',
          pointValueRubles: session.template?.rules?.point_value_rubles || 50,
          queueAlgorithm: session.template?.rules?.queue_algorithm || 'random_no_repeat',
          ballsToWin: session.template?.rules?.balls_to_win || 15
        } : undefined}
        onBack={handleBackToSession}
      />

      <main className="max-w-4xl mx-auto px-4 pb-20">
        {/* Scoreboard - –û–±—â–∏–π —Å—á–µ—Ç —Å–µ—Å—Å–∏–∏ */}
        <SessionStatisticsCard 
          statistics={sessionStatistics}
          participants={(session.participants || []).map(p => ({
            id: p.id,
            display_name: p.display_name,
            queue_position: p.queue_position
          }))}
        />

        {/* Games Section - –ò–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏ */}
        <div className="bg-gray-800 border border-gray-600 rounded-2xl p-6 mb-6">
          <h3 className="text-lg font-bold text-mint mb-4 text-center">
            –ò–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏
          </h3>
          
          {isLoadingGames ? (
            <div className="text-center py-8 text-gray-400">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-mint mx-auto mb-4"></div>
              <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã...</p>
            </div>
          ) : !games || games.length === 0 ? (
            <div className="text-center py-8 text-gray-400">
              <p>–ò–≥—Ä –≤ —Å–µ—Å—Å–∏–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ</p>
              <p className="text-sm text-gray-500 mt-2">–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å</p>
              <button
                onClick={handleNextGame}
                className="bg-mint text-black px-6 py-3 rounded-lg hover:bg-mint/80 mt-4 font-medium"
              >
                üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
              </button>
            </div>
          ) : (
            <div className="space-y-4">
              {/* Add New Game Button */}
              <div className="text-center mb-4">
                <button
                  onClick={handleNextGame}
                  className="bg-mint text-black px-6 py-3 rounded-lg hover:bg-mint/80 font-medium"
                >
                  üéÆ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
                </button>
              </div>
              
              {games && games.map((game) => (
                <div 
                  key={game.id} 
                  className="bg-gray-700 p-4 rounded-lg cursor-pointer hover:bg-gray-600 transition-colors duration-200 border border-transparent hover:border-mint/30"
                  onClick={() => handleGameClick(game.id)}
                >
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <span className="text-mint font-bold">–ò–≥—Ä–∞ #{game.game_number}</span>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        game.status === 'completed' ? 'bg-green-600 text-white' :
                        game.status === 'in_progress' ? 'bg-blue-600 text-white' :
                        game.status === 'cancelled' ? 'bg-red-600 text-white' :
                        'bg-gray-600 text-white'
                      }`}>
                        {game.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' :
                         game.status === 'in_progress' ? '–ò–¥–µ—Ç —Å–µ–π—á–∞—Å' :
                         game.status === 'cancelled' ? '–û—Ç–º–µ–Ω–µ–Ω–∞' :
                         game.status}
                      </span>
                    </div>
                    <div className="text-gray-400 text-sm">
                      {game.status === 'completed' && game.completed_at && game.started_at ? (
                        (() => {
                          const startTime = new Date(game.started_at).getTime()
                          const endTime = new Date(game.completed_at).getTime()
                          const durationMs = endTime - startTime
                          const durationMinutes = Math.floor(durationMs / (1000 * 60))
                          const durationSeconds = Math.floor((durationMs % (1000 * 60)) / 1000)
                          return `‚è±Ô∏è ${durationMinutes}:${durationSeconds.toString().padStart(2, '0')}`
                        })()
                      ) : game.status === 'in_progress' ? (
                        ''
                      ) : '--:--'}
                    </div>
                  </div>
                  
                  {/* üîÑ –û–ë–ù–û–í–õ–Ø–ï–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º GamePlayersSummary –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä */}
                  {game.status === 'completed' ? (
                    <div className="mb-3">
                      {gamePlayersData[game.id] ? (
                        <GamePlayersSummary 
                          players={gamePlayersData[game.id]} 
                          isReadOnly={true}
                        />
                      ) : (
                        <div className="text-center py-2 text-gray-400">
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-mint mx-auto mb-2"></div>
                          <p className="text-xs">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...</p>
                        </div>
                      )}
                    </div>
                  ) : game.status === 'in_progress' ? (
                    <div className="text-center py-4 text-blue-400">
                      <div className="text-lg mb-2">–ò–≥—Ä–∞ –∏–¥–µ—Ç</div>
                      <div className="text-sm">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</div>
                    </div>
                  ) : game.status === 'cancelled' ? (
                    <div className="text-center py-4 text-red-400">
                      <div className="text-sm">–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</div>
                    </div>
                  ) : (
                    <div className="text-gray-300 text-sm">
                      <p>ID: {game.id}</p>
                      <p>–°–µ—Å—Å–∏—è: {game.session_id}</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Game Controls - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (–ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤–Ω–∏–∑) */}
        <div className="bg-gray-800 border border-gray-600 rounded-2xl p-6 mb-6">
          <div className="flex gap-3">
            <button
              onClick={handleEndGame}
              className="bg-red-500 text-white px-6 py-3 rounded-full hover:bg-red-600 font-semibold text-base transition-all duration-250"
            >
              üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
            </button>
          </div>
        </div>
      </main>

      {/* Score Modal */}
      <ScoreModal
        isOpen={isScoreModalOpen}
        onClose={() => setIsScoreModalOpen(false)}
        playerName={selectedPlayer?.name || ''}
        onConfirm={handleScoreConfirm}
      />

      {/* End Game Modal */}
      <EndGameModal
        isOpen={isEndGameModalOpen}
        onClose={() => setIsEndGameModalOpen(false)}
        onConfirm={handleConfirmEndGame}
      />
    </div>
  )
}
