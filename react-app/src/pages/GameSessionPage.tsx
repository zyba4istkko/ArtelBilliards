import React, { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { 
  GameHeader, 
  Scoreboard, 
  GameHistory, 
  ActionPanel, 
  GameControls,
  ScoreModal,
  PlayerCard,
  EndGameModal
} from '../components/ui'
import { SessionService } from '../api/services/sessionService'
import { gameService } from '../api/services/gameService'
import { TemplateService } from '../api/services/templateService' // Added import for TemplateService
import type { GameSession, Game } from '../api/types'

interface Player {
  id: string
  name: string
  avatar: string
  points: number
  money: number
  balls: Array<{
    color: string
    name: string
    points: number
  }>
  fouls: number
}

export default function GameSessionPage() {
  const { sessionId } = useParams<{ sessionId: string }>()
  const navigate = useNavigate()
  
  // Loading states
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentGame, setCurrentGame] = useState<any>(null)
  const [session, setSession] = useState<any>(null)
  const [games, setGames] = useState<any[]>([])
  const [isLoadingGames, setIsLoadingGames] = useState(false)  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä
  
  // Game state
  const [isPaused, setIsPaused] = useState(false)
  const [gameStartTime] = useState(Date.now())
  const [currentGameNumber, setCurrentGameNumber] = useState(1)
  
  // Players state (transformed from API data)
  const [players, setPlayers] = useState<Player[]>([])

  // Modal states
  const [isScoreModalOpen, setIsScoreModalOpen] = useState(false)
  const [isEndGameModalOpen, setIsEndGameModalOpen] = useState(false)
  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null)

  // Load session data on component mount
  useEffect(() => {
    if (sessionId) {
      loadSessionData()
    }
  }, [sessionId])

  // Load session data from API
  const loadSessionData = async () => {
    if (!sessionId) return
    
    try {
      setIsLoading(true)
      setError(null)
      
      // Load session details
      const sessionData = await SessionService.getSession(sessionId)
      setSession(sessionData)
      
      // Load session players
      const playersData = await SessionService.getSessionPlayers(sessionId)
      
      // Transform API data to Player format for UI
      const transformedPlayers: Player[] = playersData.map((sp) => ({
        id: sp.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º sp.id –≤–º–µ—Å—Ç–æ sp.user_id –¥–ª—è –±–æ—Ç–æ–≤
        name: sp.display_name,
        avatar: sp.display_name.charAt(0).toUpperCase(),
        points: sp.current_score || 0,
        money: (sp.session_balance_rubles || 0) * 10, // Convert to game currency
        balls: [], // TODO: Add balls from game events
        fouls: 0   // TODO: Add fouls from game events
      }))
      setPlayers(transformedPlayers)
      
      // Load games data
      try {
        setIsLoadingGames(true)  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä
        console.log('üéÆ GameSessionPage: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId)
        const gamesData = await gameService.getSessionGames(sessionId)
        console.log('üéÆ GameSessionPage: –ü–æ–ª—É—á–µ–Ω—ã –∏–≥—Ä—ã –æ—Ç API:', gamesData)
        console.log('üéÆ GameSessionPage: –¢–∏–ø gamesData:', typeof gamesData)
        console.log('üéÆ GameSessionPage: gamesData.length:', gamesData?.length)
        
        if (gamesData && Array.isArray(gamesData)) {
          console.log('üéÆ GameSessionPage: –ò–≥—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', gamesData.length)
          setGames(gamesData)
        } else {
          console.log('üéÆ GameSessionPage: gamesData –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤')
          console.log('üéÆ GameSessionPage: gamesData —Ç–∏–ø:', typeof gamesData)
          console.log('üéÆ GameSessionPage: gamesData —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', gamesData)
          setGames([])
        }
      } catch (gamesError) {
        console.error('‚ùå GameSessionPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä:', gamesError)
        setGames([])
      } finally {
        setIsLoadingGames(false)  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –∫–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä
      }
      
    } catch (err: any) {
      console.error('Failed to load session data:', err)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏')
    } finally {
      setIsLoading(false)
    }
  }

  // Game controls
  const handlePause = () => setIsPaused(true)
  const handleResume = () => setIsPaused(false)
  
  const handleEndGame = () => {
    setIsEndGameModalOpen(true)
  }

  const handleNextGame = async () => {
    // Create new game in session
    if (sessionId) {
      try {
        console.log('üéÆ GameSessionPage: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ —Å–µ—Å—Å–∏–∏...')
        console.log('üéÆ GameSessionPage: sessionId:', sessionId)
        
        // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü–æ–ª—É—á–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å–µ—Å—Å–∏–∏
        let queueAlgorithm = 'random_no_repeat' // fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if (session?.template_id) {
          try {
            console.log('üéÆ GameSessionPage: –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏...')
            const template = await TemplateService.getTemplate(session.template_id)
            if (template?.rules?.queue_algorithm) {
              queueAlgorithm = template.rules.queue_algorithm
              console.log('üéÆ GameSessionPage: –ê–ª–≥–æ—Ä–∏—Ç–º –∏–∑ —à–∞–±–ª–æ–Ω–∞:', queueAlgorithm)
            } else {
              console.log('üéÆ GameSessionPage: –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —à–∞–±–ª–æ–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', queueAlgorithm)
            }
          } catch (templateError) {
            console.error('‚ùå GameSessionPage: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞:', templateError)
            console.log('üéÆ GameSessionPage: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–ª–≥–æ—Ä–∏—Ç–º:', queueAlgorithm)
          }
        } else {
          console.log('üéÆ GameSessionPage: –ù–µ—Ç template_id –≤ —Å–µ—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', queueAlgorithm)
        }
        
        // Create game with algorithm from template
        const newGame = await gameService.createGame(sessionId, {
          queue_algorithm: queueAlgorithm
        })
        
        console.log('üéÆ GameSessionPage: –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', newGame)
        console.log('üéÆ GameSessionPage: –¢–∏–ø newGame:', typeof newGame)
        console.log('üéÆ GameSessionPage: newGame.id:', newGame?.id)
        
        if (newGame && newGame.id) {
          console.log('üéÆ GameSessionPage: –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä')
          // Refresh games list
          await loadSessionData()
          // Navigate to the new game's page
          navigate(`/active-game/${newGame.id}`)  // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: /game/ -> /active-game/
        } else {
          console.log('üéÆ GameSessionPage: –ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (newGame undefined –∏–ª–∏ –±–µ–∑ ID)')
        }
      } catch (error) {
        console.error('‚ùå GameSessionPage: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error)
      }
    }
  }

  // üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏–≥—Ä–µ
  const handleGameClick = (gameId: string) => {
    console.log('üéÆ GameSessionPage: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ:', gameId)
    navigate(`/active-game/${gameId}`)  // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: /game/ -> /active-game/
  }

  const handleAddScore = (player: Player) => {
    setSelectedPlayer(player)
    setIsScoreModalOpen(true)
  }

  const handleScoreConfirm = (action: 'ball' | 'foul', ball?: any, tag?: string) => {
    if (!selectedPlayer) return

    setPlayers(prev => prev.map(p => {
      if (p.id === selectedPlayer.id) {
        if (action === 'ball' && ball) {
          const newBalls = [...p.balls, ball]
          const newPoints = p.points + ball.points
          const newMoney = p.money + (ball.points * 10)
          
          // Add log entry
          let logText = `${p.name} –∑–∞–±–∏–ª ${ball.name.toLowerCase()} —à–∞—Ä (+${ball.points})`
          if (tag) logText += ` [${tag}]`
          // addLogEntry(logText, '‚ö´', getBallColor(ball.name), p.name)

          return {
            ...p,
            points: newPoints,
            money: newMoney,
            balls: newBalls
          }
        } else if (action === 'foul') {
          const newPoints = p.points - 1
          const newMoney = p.money - 50
          const newFouls = p.fouls + 1
          
          // Add log entry
          let logText = `${p.name} —Å–æ–≤–µ—Ä—à–∏–ª —à—Ç—Ä–∞—Ñ (-1, -50‚ÇΩ)`
          if (tag) logText += ` [${tag}]`
          // addLogEntry(logText, '‚ùå', '#ef4444', p.name)

          return {
            ...p,
            points: newPoints,
            money: newMoney,
            fouls: newFouls
          }
        }
      }
      return p
    }))

    // Update current game in games array
    setGames(prev => prev.map(game => {
      if (game.status === 'in_progress') {
        return {
          ...game,
          players: players.map(p => {
            if (p.id === selectedPlayer.id) {
              if (action === 'ball' && ball) {
                return { ...p, balls: [...p.balls, ball] }
              } else if (action === 'foul') {
                return { ...p, fouls: p.fouls + 1 }
              }
            }
            return p
          })
        }
      }
      return game
    }))
  }

  // const addLogEntry = (text: string, icon: string, color?: string, addedBy: string = '–°–∏—Å—Ç–µ–º–∞') => {
  //   const now = new Date()
  //   const timeString = `${now.getHours()}:${now.getMinutes().toString().padStart(2, '0')}`
    
  //   const newEntry: LogEntry = {
  //     id: Date.now().toString(),
  //     text,
  //     icon,
  //     color,
  //     playerName: selectedPlayer?.name || '',
  //     timestamp: timeString,
  //     addedBy,
  //     canEdit: addedBy !== '–°–∏—Å—Ç–µ–º–∞'
  //   }

  //   setLogEntries(prev => [newEntry, ...prev.slice(0, 14)]) // Keep max 15 entries
  // }

  // const getBallColor = (ballName: string) => {
  //   const colors: Record<string, string> = {
  //     '–ö—Ä–∞—Å–Ω—ã–π': '#f44336',
  //     '–ñ–µ–ª—Ç—ã–π': '#ffeb3b',
  //     '–ó–µ–ª–µ–Ω—ã–π': '#4caf50',
  //     '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π': '#8d6e63',
  //     '–°–∏–Ω–∏–π': '#2196f3',
  //     '–†–æ–∑–æ–≤—ã–π': '#e91e63',
  //     '–ß–µ—Ä–Ω—ã–π': '#212121',
  //     '–ë–µ–ª—ã–π': '#ffffff'
  //   }
  //   return colors[ballName] || '#ffffff'
  // }

  // const handleEditLogEntry = (entryId: string) => {
  //   // Find the entry and open score modal for the player
  //   const entry = logEntries.find(e => e.id === entryId)
  //   if (entry) {
  //     const player = players.find(p => p.name === entry.playerName)
  //     if (player) {
  //       setSelectedPlayer(player)
  //       setIsScoreModalOpen(true)
  //     }
  //   }
  // }

  const handleBackToSession = () => {
    navigate('/session')
  }

  const handleConfirmEndGame = () => {
    // Logic for ending the game
    setIsEndGameModalOpen(false)
    // Navigate back to session
    navigate('/session')
  }

  // Find leading player
  const leadingPlayer = players.length > 0 
    ? players.reduce((prev, current) => 
        prev.points > current.points ? prev : current
      )
    : null

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-mint mx-auto mb-4"></div>
          <p className="text-mint text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏...</p>
        </div>
      </div>
    )
  }

  // Error state
  if (error) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-500 text-lg mb-4">{error}</p>
          <button 
            onClick={loadSessionData}
            className="bg-mint text-black px-6 py-2 rounded-lg hover:bg-mint/80"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    )
  }

  // No session data
  if (!session) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-500 text-lg">–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
          <button 
            onClick={() => navigate('/dashboard')}
            className="bg-mint text-black px-6 py-2 rounded-lg hover:bg-mint/80 mt-4"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ dashboard
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Game Header */}
      <GameHeader
        gameType={session.name || '–ò–≥—Ä–∞'}
        sessionId={session.id}
        playerCount={session.current_players_count}
        gameCount={games?.length || 0}
        sessionStatus={session.status}
        onBack={handleBackToSession}
      />

      <main className="max-w-4xl mx-auto px-4 pb-20">
        {/* Scoreboard - –û–±—â–∏–π —Å—á–µ—Ç —Å–µ—Å—Å–∏–∏ */}
        <div className="bg-gray-800 border border-gray-600 rounded-2xl p-6 mb-6">
          <h2 className="text-lg font-bold text-mint mb-4 text-center">
            –û–±—â–∏–π —Å—á–µ—Ç —Å–µ—Å—Å–∏–∏
          </h2>
          
          {!session.participants || session.participants.length === 0 ? (
            <div className="text-center py-8 text-gray-400">
              <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {session.participants.map((participant: any) => (
                <div key={participant.id} className="bg-gray-700 p-4 rounded-lg text-center relative">
                  <div className="w-8 h-8 bg-mint text-black rounded-full flex items-center justify-center font-bold text-sm mx-auto mb-2">
                    {participant.display_name.charAt(0).toUpperCase()}
                  </div>
                  <h3 className="font-semibold text-sm mb-1">{participant.display_name}</h3>
                  <div className="text-xs text-gray-400 space-y-1">
                    <p>–û—á–∫–∏: {participant.current_score}</p>
                    <p>–ë–∞–ª–∞–Ω—Å: {participant.session_balance_rubles} ‚ÇΩ</p>
                    <p>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {participant.total_games_played}</p>
                    <p>–®–∞—Ä–æ–≤ –∑–∞–±–∏—Ç–æ: {participant.total_balls_potted}</p>
                  </div>
                  {leadingPlayer && participant.id === leadingPlayer.id && (
                    <div className="absolute -top-2 -right-2 w-6 h-6 bg-yellow-400 rounded-full flex items-center justify-center">
                      <span className="text-black text-xs">üëë</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Games Section - –ò–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏ */}
        <div className="bg-gray-800 border border-gray-600 rounded-2xl p-6 mb-6">
          <h3 className="text-lg font-bold text-mint mb-4 text-center">
            –ò–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏
          </h3>
          
          {isLoadingGames ? (
            <div className="text-center py-8 text-gray-400">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-mint mx-auto mb-4"></div>
              <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã...</p>
            </div>
          ) : !games || games.length === 0 ? (
            <div className="text-center py-8 text-gray-400">
              <p>–ò–≥—Ä –≤ —Å–µ—Å—Å–∏–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ</p>
              <p className="text-sm text-gray-500 mt-2">–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å</p>
              <button
                onClick={handleNextGame}
                className="bg-mint text-black px-6 py-3 rounded-lg hover:bg-mint/80 mt-4 font-medium"
              >
                üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
              </button>
            </div>
          ) : (
            <div className="space-y-4">
              {/* Add New Game Button */}
              <div className="text-center mb-4">
                <button
                  onClick={handleNextGame}
                  className="bg-mint text-black px-6 py-3 rounded-lg hover:bg-mint/80 font-medium"
                >
                  üéÆ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
                </button>
              </div>
              
              {games && games.map((game) => (
                <div 
                  key={game.id} 
                  className="bg-gray-700 p-4 rounded-lg cursor-pointer hover:bg-gray-600 transition-colors duration-200 border border-transparent hover:border-mint/30"
                  onClick={() => handleGameClick(game.id)}
                >
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <span className="text-mint font-bold">–ò–≥—Ä–∞ #{game.game_number}</span>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        game.status === 'completed' ? 'bg-green-600 text-white' :
                        game.status === 'in_progress' ? 'bg-blue-600 text-white' :
                        game.status === 'cancelled' ? 'bg-red-600 text-white' :
                        'bg-gray-600 text-white'
                      }`}>
                        {game.status === 'completed' ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞' :
                         game.status === 'in_progress' ? 'üéÆ –ò–¥–µ—Ç —Å–µ–π—á–∞—Å' :
                         game.status === 'cancelled' ? '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞' :
                         game.status}
                      </span>
                    </div>
                    <div className="text-gray-400 text-sm">
                      {game.started_at ? new Date(game.started_at).toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit'
                      }) : '--:--'}
                    </div>
                  </div>
                  
                  {/* Game details */}
                  <div className="text-gray-300 text-sm">
                    <p>ID: {game.id}</p>
                    <p>–°–µ—Å—Å–∏—è: {game.session_id}</p>
                    {game.winner_participant_id && (
                      <p className="text-mint">–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {game.winner_participant_id}</p>
                    )}
                    {game.completed_at && game.started_at && (
                      <p>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {Math.floor((new Date(game.completed_at).getTime() - new Date(game.started_at).getTime()) / 1000 / 60)}:{(Math.floor((new Date(game.completed_at).getTime() - new Date(game.started_at).getTime()) / 1000) % 60).toString().padStart(2, '0')}</p>
                    )}
                  </div>
                  
                  {/* üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ –∫–ª–∏–∫–µ */}
                  <div className="text-center mt-3 pt-3 border-t border-gray-600">
                    <span className="text-xs text-gray-400">üëÜ –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É</span>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Game Controls - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É (–ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤–Ω–∏–∑) */}
        <div className="bg-gray-800 border border-gray-600 rounded-2xl p-6 mb-6">
          <div className="flex gap-3">
            <button
              onClick={handleEndGame}
              className="bg-red-500 text-white px-6 py-3 rounded-full hover:bg-red-600 font-semibold text-base transition-all duration-250"
            >
              üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
            </button>
          </div>
        </div>
      </main>

      {/* Score Modal */}
      <ScoreModal
        isOpen={isScoreModalOpen}
        onClose={() => setIsScoreModalOpen(false)}
        playerName={selectedPlayer?.name || ''}
        onConfirm={handleScoreConfirm}
      />

      {/* End Game Modal */}
      <EndGameModal
        isOpen={isEndGameModalOpen}
        onClose={() => setIsEndGameModalOpen(false)}
        onConfirm={handleConfirmEndGame}
      />
    </div>
  )
}
