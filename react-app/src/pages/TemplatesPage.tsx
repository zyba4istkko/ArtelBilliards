import { useState, useEffect } from 'react'
import { 
  Box, 
  Container, 
  Typography, 
  Grid, 
  Button, 
  CircularProgress,
  Alert,
  TextField
} from '@mui/material'
import { useNavigate } from 'react-router-dom'
import { toast } from 'sonner'

import { TemplateService } from '../api/services/templateService'
import type { GameTemplate, GameTemplateListResponse, GameTemplateCreate } from '../api/types'
import tokens from '../styles/design-tokens'
import { 
  PriceSelector, 
  OptionSelector,
  BaseModal,
  TemplateCard,
  CreateTemplateCard,
  BallConfigurator,
  SettingsPanel,
  BallsDisplay
} from '../components/ui'
import { 
  headerStyles,
  primaryButtonStyles,
  secondaryButtonStyles
} from '../styles/template-styles'
import { 
  DEFAULT_TEMPLATE_SETTINGS,
  BALL_COUNT_OPTIONS,
  TIME_LIMIT_OPTIONS,
  WIN_CONDITION_OPTIONS,
  TURN_ORDER_OPTIONS,
  POINT_PRICE_OPTIONS,
  FOUL_PENALTY_OPTIONS,
  GAME_TYPE_ICONS
} from '../constants/template-constants'
import { getTemplateDetails, normalizeTemplateData } from '../utils/template-utils'
import { useAuthStore } from '../store/authStore'

interface BallConfig {
  name: string
  color: string
  points: string | number
  enabled: boolean
}

interface CustomTemplateData {
  name: string
  description: string
  ballCount: string
  timeLimit: string
  winCondition: string
  turnOrder: string
  pointPrice: string
  foulPenalty: string
  balls: BallConfig[]
}

function TemplatesPage() {
  console.log('üöÄ TemplatesPage: Component starting...')
  
  const navigate = useNavigate()
  const { user } = useAuthStore()
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [templatesData, setTemplatesData] = useState<GameTemplateListResponse>({
    templates: [],
    total: 0,
    page: 1,
    page_size: 20,
    categories: []
  })

  // Modal states
  const [viewModalOpen, setViewModalOpen] = useState(false)
  const [createModalOpen, setCreateModalOpen] = useState(false)
  const [currentTemplate, setCurrentTemplate] = useState<GameTemplate | null>(null)
  
  // Custom template state
  const [customTemplate, setCustomTemplate] = useState<CustomTemplateData>(DEFAULT_TEMPLATE_SETTINGS)

  useEffect(() => {
    loadTemplates()
  }, [])

  const loadTemplates = async () => {
    try {
      setLoading(true)
      setError(null)
      console.log('üîÑ Starting to load templates...')
      
      const data = await TemplateService.getTemplates({ 
        page: 1, 
        page_size: 20,
        is_public: true 
      })
      
      console.log('üîç API Response:', data)
      
      if (!data) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã')
      }
      
      const normalizedData = normalizeTemplateData(data)
      console.log('üìã Normalized data:', normalizedData)
      
      setTemplatesData(normalizedData)
      
    } catch (err) {
      console.error('‚ùå Error loading templates:', err)
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      setError(errorMessage)
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã')
    } finally {
      setLoading(false)
    }
  }

  const viewTemplate = (template: GameTemplate) => {
    setCurrentTemplate(template)
    setViewModalOpen(true)
  }

  const createCustomTemplate = () => {
    setCreateModalOpen(true)
  }

  const selectTemplate = () => {
    if (!currentTemplate) return
    
    setViewModalOpen(false)
    toast.success(`–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: ${currentTemplate.name}`)
    navigate(`/session?template=${currentTemplate.id}`)
  }

  const saveCustomTemplate = async () => {
    if (!customTemplate.name.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞!')
      return
    }
    
    try {
      setLoading(true)
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è API
      const templateData: GameTemplateCreate = {
        name: customTemplate.name,
        description: customTemplate.description,
        game_type: 'kolkhoz',
        rules: {
          game_type: 'kolkhoz',
          max_players: parseInt(customTemplate.ballCount) || 6,
          min_players: 2,
          point_value_rubles: parseFloat(customTemplate.pointPrice) || 10.0,
          balls: customTemplate.balls
            .filter(ball => ball.enabled)
            .map((ball) => ({
              color: ball.color,
              points: typeof ball.points === 'string' ? 
                (ball.points === '–ë–∏—Ç–æ–∫' ? 0 : parseInt(ball.points) || 1) : 
                ball.points,
              is_required: ball.enabled,
              order_priority: 1
            })),
          queue_algorithm: customTemplate.turnOrder === 'sequential' ? 'manual' : 'always_random',
          payment_direction: 'clockwise',
          allow_queue_change: true,
          calculate_net_result: true
        },
        settings: {
          ui_theme: 'custom',
          show_running_total: true,
          enable_sound_effects: true
        },
        category_id: 2, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ (—Å–æ–∑–¥–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
        is_public: true,
        tags: ['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π', '–∫–∞—Å—Ç–æ–º–Ω—ã–π'],
        creator_user_id: user?.id || '00000000-0000-0000-0000-000000000000'
      }
      
      console.log('üíæ Creating custom template:', templateData)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
      const createdTemplate = await TemplateService.createTemplate(templateData)
      
      console.log('‚úÖ Template created:', createdTemplate)
      
      setCreateModalOpen(false)
      toast.success(`–®–∞–±–ª–æ–Ω "${customTemplate.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`)
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
      await loadTemplates()
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setCustomTemplate(DEFAULT_TEMPLATE_SETTINGS)
      
    } catch (error: any) {
      console.error('‚ùå Error creating template:', error)
      toast.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    } finally {
      setLoading(false)
    }
  }

  const getTemplateIcon = (gameType: string) => {
    return GAME_TYPE_ICONS[gameType] || 'üéØ'
  }

  console.log('üé® RENDER: templatesData:', templatesData)
  console.log('üé® RENDER: loading:', loading)
  console.log('üé® RENDER: error:', error)

  return (
    <Box sx={{ bgcolor: tokens.colors.black, color: tokens.colors.white, minHeight: '100vh' }}>
      <Container maxWidth="lg" sx={{ py: 4 }}>
        {/* Header */}
        <Box textAlign="center" mb={6}>
          <Typography variant="h3" component="h1" sx={headerStyles}>
            –®–∞–±–ª–æ–Ω—ã –∏–≥—Ä
          </Typography>
          <Typography variant="h6" color={tokens.colors.gray300} sx={{ fontSize: '1.125rem' }}>
            –í—ã–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞
          </Typography>
        </Box>

        {/* Templates Grid */}
        <Grid container spacing={3}>
          {/* –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ */}
          {loading && (
            <Grid item xs={12}>
              <Box display="flex" justifyContent="center" py={4}>
                <CircularProgress />
              </Box>
            </Grid>
          )}

          {/* –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ */}
          {error && (
            <Grid item xs={12}>
              <Alert severity="error" sx={{ mb: 3 }} action={
                <Button color="inherit" size="small" onClick={loadTemplates}>
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </Button>
              }>
                {error}
              </Alert>
            </Grid>
          )}

          {/* –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã */}
          {!loading && !error && (
            <>
              {/* –®–∞–±–ª–æ–Ω—ã */}
              {templatesData?.templates?.length ? (
                templatesData.templates.map((template) => (
                  <Grid item xs={12} md={6} lg={4} key={template.id}>
                    <TemplateCard template={template} onView={viewTemplate} />
                  </Grid>
                ))
              ) : (
                <Grid item xs={12}>
                  <Typography color={tokens.colors.gray300} textAlign="center" sx={{ py: 4 }}>
                    –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π!
                  </Typography>
                </Grid>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
              <Grid item xs={12} md={6} lg={4}>
                <CreateTemplateCard onClick={createCustomTemplate} />
              </Grid>
            </>
          )}
        </Grid>

        {/* Template View Modal */}
        <BaseModal
          open={viewModalOpen}
          onClose={() => setViewModalOpen(false)}
          title={currentTemplate?.name || '–®–∞–±–ª–æ–Ω'}
        >
          {currentTemplate && (
            <>
              {/* Header with Icon */}
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>
                <Box sx={{ 
                  width: 40, 
                  height: 40, 
                  background: `linear-gradient(135deg, ${tokens.colors.mint}, ${tokens.colors.darkTeal})`,
                  borderRadius: '50%',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '1.2rem'
                }}>
                  {getTemplateIcon(currentTemplate.game_type)}
                </Box>
                <Typography variant="h5" fontWeight={700} color={tokens.colors.white}>
                  {currentTemplate.name}
                </Typography>
              </Box>

              {/* Settings Panel */}
              <SettingsPanel 
                settings={getTemplateDetails(currentTemplate).settings}
                title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã"
              />

              {/* Balls Display */}
              <BallsDisplay 
                balls={getTemplateDetails(currentTemplate).balls}
                title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞—Ä–æ–≤"
              />

              {/* Scoring Panel */}
              <SettingsPanel 
                settings={getTemplateDetails(currentTemplate).scoring}
                title="–°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤"
              />

              {/* Action Buttons */}
              <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
                <Button 
                  variant="outlined" 
                  onClick={() => setViewModalOpen(false)}
                  sx={secondaryButtonStyles}
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </Button>
                <Button 
                  variant="contained"
                  onClick={selectTemplate}
                  sx={primaryButtonStyles}
                >
                  –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω
                </Button>
              </Box>
            </>
          )}
        </BaseModal>

        {/* Create Custom Template Modal */}
        <BaseModal
          open={createModalOpen}
          onClose={() => setCreateModalOpen(false)}
          title="–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —à–∞–±–ª–æ–Ω"
          size="large"
        >
          {/* Basic Info */}
          <Box sx={{ mb: 4 }}>
            <Typography variant="h6" color={tokens.colors.mint} fontWeight={700} gutterBottom sx={{ fontSize: '1.125rem' }}>
              –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </Typography>
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞..."
              value={customTemplate.name}
              onChange={(e) => setCustomTemplate({ ...customTemplate, name: e.target.value })}
              sx={{ 
                mb: 2,
                '& .MuiInputBase-root': {
                  background: tokens.colors.gray700,
                  color: tokens.colors.white
                },
                '& .MuiInputLabel-root': {
                  color: tokens.colors.gray300
                }
              }}
            />
            <TextField
              fullWidth
              multiline
              rows={3}
              label="–û–ø–∏—Å–∞–Ω–∏–µ"
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã..."
              value={customTemplate.description}
              onChange={(e) => setCustomTemplate({ ...customTemplate, description: e.target.value })}
              sx={{
                '& .MuiInputBase-root': {
                  background: tokens.colors.gray700,
                  color: tokens.colors.white
                },
                '& .MuiInputLabel-root': {
                  color: tokens.colors.gray300
                }
              }}
            />
          </Box>

          {/* Game Settings */}
          <Box sx={{ mb: 4 }}>
            <Typography variant="h6" color={tokens.colors.mint} fontWeight={700} gutterBottom sx={{ fontSize: '1.125rem' }}>
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
            </Typography>
            <Grid container spacing={3}>
              <Grid item xs={6}>
                <Box sx={{ background: tokens.colors.gray700, borderRadius: '14px', p: 2 }}>
                  <OptionSelector
                    label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–æ–≤"
                    value={customTemplate.ballCount}
                    onChange={(value) => setCustomTemplate({ ...customTemplate, ballCount: value })}
                    options={BALL_COUNT_OPTIONS}
                    row
                  />
                </Box>
              </Grid>
              <Grid item xs={6}>
                <Box sx={{ background: tokens.colors.gray700, borderRadius: '14px', p: 2 }}>
                  <OptionSelector
                    label="–õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ö–æ–¥"
                    value={customTemplate.timeLimit}
                    onChange={(value) => setCustomTemplate({ ...customTemplate, timeLimit: value })}
                    options={TIME_LIMIT_OPTIONS}
                  />
                </Box>
              </Grid>
              <Grid item xs={6}>
                <Box sx={{ background: tokens.colors.gray700, borderRadius: '14px', p: 2 }}>
                  <OptionSelector
                    label="–£—Å–ª–æ–≤–∏–µ –ø–æ–±–µ–¥—ã"
                    value={customTemplate.winCondition}
                    onChange={(value) => setCustomTemplate({ ...customTemplate, winCondition: value })}
                    options={WIN_CONDITION_OPTIONS}
                  />
                </Box>
              </Grid>
              <Grid item xs={6}>
                <Box sx={{ background: tokens.colors.gray700, borderRadius: '14px', p: 2 }}>
                  <OptionSelector
                    label="–ü–æ—Ä—è–¥–æ–∫ –∏–≥—Ä—ã"
                    value={customTemplate.turnOrder}
                    onChange={(value) => setCustomTemplate({ ...customTemplate, turnOrder: value })}
                    options={TURN_ORDER_OPTIONS}
                  />
                </Box>
              </Grid>
            </Grid>
          </Box>

          {/* Ball Configuration */}
          <Box sx={{ mb: 4 }}>
            <BallConfigurator 
              balls={customTemplate.balls}
              onBallChange={(index, ball) => {
                const newBalls = [...customTemplate.balls]
                newBalls[index] = ball
                setCustomTemplate({ ...customTemplate, balls: newBalls })
              }}
            />
          </Box>

          {/* Scoring System */}
          <Box sx={{ mb: 4 }}>
            <Typography variant="h6" color={tokens.colors.mint} fontWeight={700} gutterBottom sx={{ fontSize: '1.125rem' }}>
              –°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤
            </Typography>
            <Grid container spacing={3}>
              <Grid item xs={6}>
                <Box sx={{ background: tokens.colors.gray700, borderRadius: '14px', p: 2 }}>
                  <PriceSelector
                    label="–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –æ—á–∫–∞ (‚ÇΩ)"
                    value={customTemplate.pointPrice}
                    onChange={(value) => setCustomTemplate({ ...customTemplate, pointPrice: value })}
                    options={POINT_PRICE_OPTIONS}
                  />
                </Box>
              </Grid>
              <Grid item xs={6}>
                <Box sx={{ background: tokens.colors.gray700, borderRadius: '14px', p: 2 }}>
                  <PriceSelector
                    label="–®—Ç—Ä–∞—Ñ –∑–∞ —Ñ–æ–ª (‚ÇΩ)"
                    value={customTemplate.foulPenalty}
                    onChange={(value) => setCustomTemplate({ ...customTemplate, foulPenalty: value })}
                    options={FOUL_PENALTY_OPTIONS}
                  />
                </Box>
              </Grid>
            </Grid>
          </Box>

          {/* Action Buttons */}
          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
            <Button 
              variant="outlined"
              onClick={() => setCreateModalOpen(false)}
              sx={secondaryButtonStyles}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              variant="contained"
              onClick={saveCustomTemplate}
              sx={primaryButtonStyles}
            >
              –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω
            </Button>
          </Box>
        </BaseModal>
      </Container>
    </Box>
  )
}

export default TemplatesPage 