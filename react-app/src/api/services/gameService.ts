import { apiClient } from '../client'
import { GameResponse, CreateGameRequest } from '../types'

export const gameService = {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏
   */
  async createGame(sessionId: string, request: CreateGameRequest): Promise<GameResponse> {
    console.log('üéÆ gameService.createGame: –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId)
    console.log('üéÆ gameService.createGame: Request:', request)
    
    const response = await apiClient.getGameClient().post(`/api/v1/sessions/${sessionId}/games`, request)
    
    console.log('üéÆ gameService.createGame: –û—Ç–≤–µ—Ç –æ—Ç API:', response.data)
    console.log('üéÆ gameService.createGame: –í–æ–∑–≤—Ä–∞—â–∞–µ–º:', response.data)
    
    return response.data
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –≤ —Å–µ—Å—Å–∏–∏
   */
  async getSessionGames(sessionId: string, limit: number = 10, offset: number = 0): Promise<GameResponse[]> {
    const response = await apiClient.getGameClient().get(`/api/v1/sessions/${sessionId}/games`, {
      params: { limit, offset }
    })
    // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {games: [...], total: N}, –∞ –Ω–µ –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é
    return response.data.games || []
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ
   */
  async getGame(gameId: string): Promise<GameResponse> {
    // üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: backend endpoint –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ /api/v1/{game_id}, –∞ –Ω–µ /api/v1/games/{game_id}
    const response = await apiClient.getGameClient().get(`/api/v1/${gameId}`)
    return response.data
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏
   */
  async getActiveGame(sessionId: string): Promise<GameResponse | null> {
    try {
      const response = await apiClient.getGameClient().get(`/api/v1/sessions/${sessionId}/active-game`)
      return response.data
    } catch (error: any) {
      if (error.response?.status === 404) {
        return null // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
      }
      throw error
    }
  },

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
   */
  async completeGame(gameId: string): Promise<GameResponse> {
    const response = await apiClient.getGameClient().post(`/api/v1/games/${gameId}/end`)
    return response.data
  },

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
   */
  async addGameEvent(gameId: string, eventData: any): Promise<any> {
    console.log('üéÆ gameService.addGameEvent: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏–≥—Ä—ã:', gameId)
    console.log('üéÆ gameService.addGameEvent: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', eventData)
    
    // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL: /api/v1/games/{gameId}/events
    const response = await apiClient.getGameClient().post(`/api/v1/games/${gameId}/events`, eventData)
    
    console.log('üéÆ gameService.addGameEvent: –û—Ç–≤–µ—Ç –æ—Ç API:', response.data)
    return response.data
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
   */
  async getGameEvents(gameId: string, limit: number = 50, offset: number = 0): Promise<any[]> {
    const response = await apiClient.getGameClient().get(`/api/v1/games/${gameId}/events`, {
      params: { limit, offset }
    })
    return response.data.events
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –∏–≥—Ä—ã
   */
  async getGameScores(gameId: string): Promise<any> {
    const response = await apiClient.getGameClient().get(`/api/v1/games/${gameId}/scores`)
    return response.data
  },

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã (–ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ)
   */
  async deleteGameEvent(gameId: string, eventId: string): Promise<any> {
    console.log('üéÆ gameService.deleteGameEvent: –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ:', eventId, '–¥–ª—è –∏–≥—Ä—ã:', gameId)
    
    const response = await apiClient.getGameClient().delete(`/api/v1/games/${gameId}/events/${eventId}`)
    
    console.log('üéÆ gameService.deleteGameEvent: –û—Ç–≤–µ—Ç –æ—Ç API:', response.data)
    return response.data
  }
} 