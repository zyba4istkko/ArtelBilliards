import { apiClient } from '../client'
import type { Player } from '../types'

/**
 * Player Service API
 */
export class PlayerService {
  private static baseUrl = '/auth/search-test'

  /**
   * –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ username –∏–ª–∏ email
   */
  static async searchPlayers(query: string): Promise<Player[]> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π apiClient —á–µ—Ä–µ–∑ API Gateway
      const response = await apiClient.get(`${this.baseUrl}?q=${encodeURIComponent(query)}`)
      console.log('üîç PlayerService.searchPlayers response:', response)
      
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é
      const users = Array.isArray(response) ? response : (response.data || [])
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Player
      const players: Player[] = users.map((user: any) => ({
        id: user.id,
        username: user.username,
        email: user.email,
        isBot: false,
        displayName: user.first_name || user.username,
        first_name: user.first_name,
        last_name: user.last_name,
        avatar_url: user.avatar_url,
        is_online: user.is_online,
        last_seen: user.last_seen
      }))
      
      console.log('üîç PlayerService.searchPlayers players:', players)
      return players
    } catch (error) {
      console.error('PlayerService.searchPlayers error:', error)
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getFriends(): Promise<Player[]> {
    try {
      const response = await apiClient.get(`${this.baseUrl}friends`)
      return response.friends || []
    } catch (error) {
      console.error('PlayerService.getFriends error:', error)
      return []
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –¥—Ä—É–∑—å—è
   */
  static async addFriend(playerId: string): Promise<{ success: boolean; message: string }> {
    try {
      const response = await apiClient.post(`${this.baseUrl}friends`, { player_id: playerId })
      return { success: true, message: '–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è' }
    } catch (error) {
      console.error('PlayerService.addFriend error:', error)
      return { success: false, message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è' }
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –¥—Ä—É–∑–µ–π
   */
  static async removeFriend(playerId: string): Promise<{ success: boolean; message: string }> {
    try {
      const response = await apiClient.delete(`${this.baseUrl}friends/${playerId}`)
      return { success: true, message: '–ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –¥—Ä—É–∑–µ–π' }
    } catch (error) {
      console.error('PlayerService.removeFriend error:', error)
      return { success: false, message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π' }
    }
  }
}
