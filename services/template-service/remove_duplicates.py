#!/usr/bin/env python3
"""
–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤
"""

import asyncio
import asyncpg
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_CONFIG = {
    'host': os.getenv('DB_HOST', 'postgres'),
    'port': int(os.getenv('DB_PORT', 5432)),
    'user': os.getenv('DB_USER', 'postgres'),
    'password': os.getenv('DB_PASSWORD', 'password'),
    'database': os.getenv('DB_NAME', 'template_db')
}

async def remove_duplicates():
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    
    print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    conn = await asyncpg.connect(**DB_CONFIG)
    
    try:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω—ã
        print("\nüìä –¢–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω—ã:")
        templates = await conn.fetch("""
            SELECT id, name, game_type, category_id, is_system, created_at
            FROM game_templates 
            ORDER BY name, created_at
        """)
        
        for template in templates:
            print(f"   ‚Ä¢ {template['name']} (ID: {template['id']}) - {template['game_type']} - –ö–∞—Ç–µ–≥–æ—Ä–∏—è {template['category_id']}")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        print("\nüîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        
        duplicates = await conn.fetch("""
            SELECT name, COUNT(*) as count, 
                   array_agg(id ORDER BY created_at) as ids,
                   array_agg(created_at ORDER BY created_at) as dates
            FROM game_templates 
            GROUP BY name 
            HAVING COUNT(*) > 1
        """)
        
        if not duplicates:
            print("   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} —à–∞–±–ª–æ–Ω–æ–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏:")
        for dup in duplicates:
            print(f"      ‚Ä¢ {dup['name']}: {dup['count']} –∫–æ–ø–∏–π")
            for i, (id_val, date) in enumerate(zip(dup['ids'], dup['dates'])):
                print(f"        {i+1}. ID: {id_val}, —Å–æ–∑–¥–∞–Ω: {date}")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
        print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        
        for dup in duplicates:
            # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π), —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            ids_to_remove = dup['ids'][1:]  # –í—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
            
            for id_to_remove in ids_to_remove:
                await conn.execute("DELETE FROM game_templates WHERE id = $1", id_to_remove)
                print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {dup['name']} (ID: {id_to_remove})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        remaining_templates = await conn.fetch("""
            SELECT id, name, game_type, category_id, is_system, created_at
            FROM game_templates 
            ORDER BY name
        """)
        
        print(f"   üìä –û—Å—Ç–∞–ª–æ—Å—å {len(remaining_templates)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤:")
        for template in remaining_templates:
            print(f"      ‚Ä¢ {template['name']} ({template['game_type']}) - –ö–∞—Ç–µ–≥–æ—Ä–∏—è {template['category_id']}")
        
        print("\nüéâ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await conn.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    asyncio.run(remove_duplicates())
