#!/usr/bin/env python3
"""
Template Service: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
"""

import asyncio
import asyncpg
import json
import os
import uuid
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_CONFIG = {
    'host': os.getenv('DB_HOST', 'postgres'),
    'port': int(os.getenv('DB_PORT', 5432)),
    'user': os.getenv('DB_USER', 'postgres'),
    'password': os.getenv('DB_PASSWORD', 'password'),
    'database': os.getenv('DB_NAME', 'template_db')
}

async def update_system_templates():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    
    print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    conn = await asyncpg.connect(**DB_CONFIG)
    
    try:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 1. –£–î–ê–õ–ï–ù–ò–ï –†–ï–ô–¢–ò–ù–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´
        print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ rating –∏–∑ game_templates
        await conn.execute("ALTER TABLE game_templates DROP COLUMN IF EXISTS rating")
        print("   ‚úÖ –ü–æ–ª–µ 'rating' —É–¥–∞–ª–µ–Ω–æ")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ usage_count –∏–∑ game_templates  
        await conn.execute("ALTER TABLE game_templates DROP COLUMN IF EXISTS usage_count")
        print("   ‚úÖ –ü–æ–ª–µ 'usage_count' —É–¥–∞–ª–µ–Ω–æ")
        
        # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É template_ratings –ø–æ–ª–Ω–æ—Å—Ç—å—é
        await conn.execute("DROP TABLE IF EXISTS template_ratings CASCADE")
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'template_ratings' —É–¥–∞–ª–µ–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
        await conn.execute("DROP INDEX IF EXISTS idx_game_templates_rating_usage")
        await conn.execute("DROP INDEX IF EXISTS idx_game_templates_rating")
        print("   ‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —É–¥–∞–ª–µ–Ω—ã")
        
        # 2. –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –®–ê–ë–õ–û–ù–û–í –ö–û–õ–•–û–ó–ê
        print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ö–æ–ª—Ö–æ–∑–∞...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω "–ö–æ–ª—Ö–æ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"
        kolkhoz_standard_rules = {
            "game_type": "kolkhoz",
            "max_players": 6,
            "min_players": 2,
            "balls_total": 15,
            "point_value_rubles": 50,
            "queue_algorithm": "random_no_repeat",
            "winning_condition": "last_ball_remaining",
            "game_rules": {
                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä—É—Å—Å–∫–∞—è –∏–≥—Ä–∞ –ö–æ–ª—Ö–æ–∑. –ò–≥—Ä–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞—Ä–∞",
                "ball_counting": "point_based",
                "foul_penalty_points": -1,
                "foul_penalty_description": "–®—Ç—Ä–∞—Ñ –∑–∞ —Ñ–æ–ª: -1 –æ—á–∫–æ (50‚ÇΩ –ø—Ä–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—á–∫–∞ 50‚ÇΩ)",
                "payment_direction": "clockwise",
                "calculate_net_result": True
            }
        }
        
        kolkhoz_standard_settings = {
            "ui_theme": "classic",
            "show_points_counter": True,
            "show_running_total": True,
            "enable_point_calculation": True,
            "show_foul_warnings": True,
            "show_payment_direction": True
        }
        
        await conn.execute("""
            UPDATE game_templates 
            SET rules = $1, settings = $2, description = $3
            WHERE name = $4
        """, json.dumps(kolkhoz_standard_rules), json.dumps(kolkhoz_standard_settings), 
        '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä—É—Å—Å–∫–∞—è –∏–≥—Ä–∞ –ö–æ–ª—Ö–æ–∑. –ò–≥—Ä–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞—Ä–∞. 50‚ÇΩ –∑–∞ –æ—á–∫–æ',
        '–ö–æ–ª—Ö–æ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (50‚ÇΩ –∑–∞ –æ—á–∫–æ)')
        print("   ‚úÖ –ö–æ–ª—Ö–æ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω "–ö–æ–ª—Ö–æ–∑ –±—é–¥–∂–µ—Ç–Ω—ã–π"
        kolkhoz_budget_rules = {
            "game_type": "kolkhoz",
            "max_players": 4,
            "min_players": 2,
            "balls_total": 15,
            "point_value_rubles": 25,
            "queue_algorithm": "random_no_repeat",
            "winning_condition": "last_ball_remaining",
            "game_rules": {
                "description": "–ë—é–¥–∂–µ—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã –ö–æ–ª—Ö–æ–∑ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
                "ball_counting": "point_based",
                "foul_penalty_points": -1,
                "foul_penalty_description": "–®—Ç—Ä–∞—Ñ –∑–∞ —Ñ–æ–ª: -1 –æ—á–∫–æ (25‚ÇΩ –ø—Ä–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—á–∫–∞ 25‚ÇΩ)",
                "payment_direction": "clockwise",
                "calculate_net_result": True
            }
        }
        
        kolkhoz_budget_settings = {
            "ui_theme": "modern",
            "show_points_counter": True,
            "show_running_total": True,
            "enable_point_calculation": True,
            "show_foul_warnings": True,
            "show_payment_direction": True
        }
        
        await conn.execute("""
            UPDATE game_templates 
            SET rules = $1, settings = $2, description = $3
            WHERE name = $4
        """, json.dumps(kolkhoz_budget_rules), json.dumps(kolkhoz_budget_settings),
        '–ë—é–¥–∂–µ—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã –ö–æ–ª—Ö–æ–∑ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. 25‚ÇΩ –∑–∞ –æ—á–∫–æ',
        '–ö–æ–ª—Ö–æ–∑ –±—é–¥–∂–µ—Ç–Ω—ã–π (25‚ÇΩ –∑–∞ –æ—á–∫–æ)')
        print("   ‚úÖ –ö–æ–ª—Ö–æ–∑ –±—é–¥–∂–µ—Ç–Ω—ã–π –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω "–ö–æ–ª—Ö–æ–∑ –ø—Ä–µ–º–∏—É–º"
        kolkhoz_premium_rules = {
            "game_type": "kolkhoz",
            "max_players": 6,
            "min_players": 2,
            "balls_total": 15,
            "point_value_rubles": 200,
            "time_limit_minutes": 30,
            "queue_algorithm": "random_no_repeat",
            "winning_condition": "last_ball_remaining",
            "game_rules": {
                "description": "–ü—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã –ö–æ–ª—Ö–æ–∑ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏",
                "ball_counting": "point_based",
                "foul_penalty_points": -1,
                "foul_penalty_description": "–®—Ç—Ä–∞—Ñ –∑–∞ —Ñ–æ–ª: -1 –æ—á–∫–æ (200‚ÇΩ –ø—Ä–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—á–∫–∞ 200‚ÇΩ)",
                "payment_direction": "clockwise",
                "calculate_net_result": True
            }
        }
        
        kolkhoz_premium_settings = {
            "ui_theme": "premium",
            "show_points_counter": True,
            "show_running_total": True,
            "enable_point_calculation": True,
            "show_foul_warnings": True,
            "show_payment_direction": True,
            "require_confirmation": True,
            "show_money_warnings": True,
            "enable_advanced_stats": True
        }
        
        await conn.execute("""
            UPDATE game_templates 
            SET rules = $1, settings = $2, description = $3
            WHERE name = $4
        """, json.dumps(kolkhoz_premium_rules), json.dumps(kolkhoz_premium_settings),
        '–ü—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã –ö–æ–ª—Ö–æ–∑ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏. 200‚ÇΩ –∑–∞ –æ—á–∫–æ',
        '–ö–æ–ª—Ö–æ–∑ –ø—Ä–µ–º–∏—É–º (200‚ÇΩ –∑–∞ –æ—á–∫–æ)')
        print("   ‚úÖ –ö–æ–ª—Ö–æ–∑ –ø—Ä–µ–º–∏—É–º –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # 3. –°–û–ó–î–ê–ù–ò–ï –ù–û–í–´–• –°–ò–°–¢–ï–ú–ù–´–• –®–ê–ë–õ–û–ù–û–í
        print("\nüÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...")
        
        # –®–∞–±–ª–æ–Ω: –ê–º–µ—Ä–∏–∫–∞–Ω–∫–∞
        americana_rules = {
            "game_type": "americana",
            "max_players": 2,
            "min_players": 2,
            "balls_total": 16,
            "balls_to_win": 8,
            "game_price_rubles": 500,
            "queue_algorithm": "random_no_repeat",
            "winning_condition": "first_to_8_balls",
            "game_rules": {
                "description": "–ò–≥—Ä–∞ –¥–æ 8 —à–∞—Ä–æ–≤. –í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –∑–∞–±—å–µ—Ç 8 —à–∞—Ä–æ–≤",
                "ball_counting": "simple_count",
                "no_color_values": True
            }
        }
        
        americana_settings = {
            "ui_theme": "classic",
            "show_ball_counter": True,
            "show_game_progress": True,
            "enable_simple_scoring": True,
            "show_winning_condition": True
        }
        
        await conn.execute("""
            INSERT INTO game_templates (id, creator_user_id, name, description, game_type, rules, settings, category_id, is_public, is_system, tags)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
        """, 
        str(uuid.uuid4()),
        '00000000-0000-0000-0000-000000000000',
        '–ê–º–µ—Ä–∏–∫–∞–Ω–∫–∞ (500‚ÇΩ –∑–∞ –ø–∞—Ä—Ç–∏—é)',
        '–†—É—Å—Å–∫–∏–π –±–∏–ª—å—è—Ä–¥. –ò–≥—Ä–∞ –¥–æ 8 —à–∞—Ä–æ–≤. –í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –∑–∞–±—å–µ—Ç 8 —à–∞—Ä–æ–≤',
        'americana',
        json.dumps(americana_rules),
        json.dumps(americana_settings),
        2, True, True, json.dumps(["–∞–º–µ—Ä–∏–∫–∞–Ω–∫–∞", "—Ä—É—Å—Å–∫–∏–π –±–∏–ª—å—è—Ä–¥", "–¥–æ 8 —à–∞—Ä–æ–≤"]))
        print("   ‚úÖ –ê–º–µ—Ä–∏–∫–∞–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –®–∞–±–ª–æ–Ω: –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞
        moscow_pyramid_rules = {
            "game_type": "moscow_pyramid",
            "max_players": 2,
            "min_players": 2,
            "balls_total": 16,
            "balls_to_win": 8,
            "game_price_rubles": 1000,
            "queue_algorithm": "random_no_repeat",
            "winning_condition": "first_to_8_balls",
            "game_rules": {
                "description": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞. –ò–≥—Ä–∞ –æ–¥–Ω–∏–º –∂–µ–ª—Ç—ã–º —à–∞—Ä–æ–º –¥–æ 8. –í—Å–µ–≥–æ 16 —à–∞—Ä–æ–≤",
                "ball_counting": "simple_count",
                "no_color_values": True,
                "special_rule": "yellow_ball_only",
                "yellow_ball_description": "–ò–≥—Ä–∞ –≤–µ–¥–µ—Ç—Å—è –æ–¥–Ω–∏–º –∂–µ–ª—Ç—ã–º —à–∞—Ä–æ–º"
            }
        }
        
        moscow_pyramid_settings = {
            "ui_theme": "classic",
            "show_ball_counter": True,
            "show_game_progress": True,
            "enable_simple_scoring": True,
            "show_winning_condition": True,
            "highlight_yellow_ball": True,
            "show_yellow_ball_rule": True
        }
        
        await conn.execute("""
            INSERT INTO game_templates (id, creator_user_id, name, description, game_type, rules, settings, category_id, is_public, is_system, tags)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
        """,
        str(uuid.uuid4()),
        '00000000-0000-0000-0000-000000000000',
        '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞ (1000‚ÇΩ –∑–∞ –ø–∞—Ä—Ç–∏—é)',
        '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞. –ò–≥—Ä–∞ –æ–¥–Ω–∏–º –∂–µ–ª—Ç—ã–º —à–∞—Ä–æ–º –¥–æ 8. –í—Å–µ–≥–æ 16 —à–∞—Ä–æ–≤',
        'moscow_pyramid',
        json.dumps(moscow_pyramid_rules),
        json.dumps(moscow_pyramid_settings),
        2, True, True, json.dumps(["–º–æ—Å–∫–æ–≤—Å–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞", "–∂–µ–ª—Ç—ã–π —à–∞—Ä", "–¥–æ 8 —à–∞—Ä–æ–≤"]))
        print("   ‚úÖ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # 4. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        templates = await conn.fetch("""
            SELECT id, name, game_type, category_id, is_system, created_at
            FROM game_templates 
            WHERE is_system = true 
            ORDER BY category_id, name
        """)
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(templates)} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤:")
        for template in templates:
            print(f"      ‚Ä¢ {template['name']} ({template['game_type']}) - –ö–∞—Ç–µ–≥–æ—Ä–∏—è {template['category_id']}")
        
        print("\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await conn.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    asyncio.run(update_system_templates())
