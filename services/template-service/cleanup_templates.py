#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å—Ç–∞—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –Ω–æ–≤—ã—Ö –±–∞–∑–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞
"""

import asyncio
import asyncpg
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_CONFIG = {
    'host': os.getenv('DB_HOST', 'postgres'),
    'port': int(os.getenv('DB_PORT', 5432)),
    'user': os.getenv('DB_USER', 'postgres'),
    'password': os.getenv('DB_PASSWORD', 'password'),
    'database': os.getenv('DB_NAME', 'template_db')
}

async def cleanup_templates():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    
    print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    conn = await asyncpg.connect(**DB_CONFIG)
    
    try:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω—ã
        print("\nüìä –¢–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω—ã:")
        templates = await conn.fetch("""
            SELECT id, name, game_type, category_id, is_system, created_at
            FROM game_templates 
            ORDER BY category_id, name
        """)
        
        for template in templates:
            print(f"   ‚Ä¢ {template['name']} ({template['game_type']}) - –ö–∞—Ç–µ–≥–æ—Ä–∏—è {template['category_id']} - –°–∏—Å—Ç–µ–º–Ω—ã–π: {template['is_system']}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ)
        print("\nüóëÔ∏è –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ (–Ω–µ —Ç–µ, —á—Ç–æ –º—ã —Å–æ–∑–¥–∞–ª–∏)
        old_templates = await conn.fetch("""
            SELECT id, name 
            FROM game_templates 
            WHERE name NOT IN (
                '–ö–æ–ª—Ö–æ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (50‚ÇΩ –∑–∞ –æ—á–∫–æ)',
                '–ö–æ–ª—Ö–æ–∑ –±—é–¥–∂–µ—Ç–Ω—ã–π (25‚ÇΩ –∑–∞ –æ—á–∫–æ)', 
                '–ö–æ–ª—Ö–æ–∑ –ø—Ä–µ–º–∏—É–º (200‚ÇΩ –∑–∞ –æ—á–∫–æ)',
                '–ê–º–µ—Ä–∏–∫–∞–Ω–∫–∞ (500‚ÇΩ –∑–∞ –ø–∞—Ä—Ç–∏—é)',
                '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞ (1000‚ÇΩ –∑–∞ –ø–∞—Ä—Ç–∏—é)'
            )
        """)
        
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(old_templates)} —Å—Ç–∞—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        for template in old_templates:
            print(f"      ‚Ä¢ {template['name']} (ID: {template['id']})")
        
        if not old_templates:
            print("   ‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã
        print("\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...")
        
        for template in old_templates:
            await conn.execute("DELETE FROM game_templates WHERE id = $1", template['id'])
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω: {template['name']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        remaining_templates = await conn.fetch("""
            SELECT id, name, game_type, category_id, is_system, created_at
            FROM game_templates 
            ORDER BY category_id, name
        """)
        
        print(f"   üìä –û—Å—Ç–∞–ª–æ—Å—å {len(remaining_templates)} —à–∞–±–ª–æ–Ω–æ–≤:")
        for template in remaining_templates:
            print(f"      ‚Ä¢ {template['name']} ({template['game_type']}) - –ö–∞—Ç–µ–≥–æ—Ä–∏—è {template['category_id']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
        categories = await conn.fetch("SELECT id, name, description FROM template_categories ORDER BY id")
        for cat in categories:
            print(f"   ‚Ä¢ ID {cat['id']}: {cat['name']} - {cat['description']}")
        
        print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await conn.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    asyncio.run(cleanup_templates())
