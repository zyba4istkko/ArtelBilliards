"""
Game Service Database Models
"""

from datetime import datetime
from decimal import Decimal
from uuid import uuid4
from typing import Optional

from sqlalchemy import (
    Column, String, Integer, Boolean, DateTime, Text, 
    ForeignKey, Numeric, Index, JSON
)
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func

from ..core.database import Base


class GameType(Base):
    """–¢–∏–ø—ã –∏–≥—Ä (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫)"""
    __tablename__ = "game_types"
    
    id = Column(Integer, primary_key=True)
    name = Column(String(100), unique=True, nullable=False)  # 'americana', 'moscow_pyramid', 'kolkhoz'
    display_name = Column(String(255), nullable=False)
    description = Column(Text)
    default_rules = Column(JSON)
    is_active = Column(Boolean, default=True)
    
    # Relationships
    sessions = relationship("GameSession", back_populates="game_type")


class GameSession(Base):
    """–ò–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏"""
    __tablename__ = "game_sessions"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    creator_user_id = Column(UUID(as_uuid=True), nullable=False)  # –°—Å—ã–ª–∫–∞ –Ω–∞ Auth Service
    game_type_id = Column(Integer, ForeignKey("game_types.id"), nullable=False)
    template_id = Column(UUID(as_uuid=True))  # –°—Å—ã–ª–∫–∞ –Ω–∞ Template Service
    name = Column(String(255), nullable=False)
    status = Column(String(50), default="waiting")  # waiting, in_progress, completed, cancelled
    max_players = Column(Integer, default=8)
    current_players_count = Column(Integer, default=0)
    rules = Column(JSON)  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏
    creation_step = Column(Integer, default=1)  # üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è (1-3)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    started_at = Column(DateTime(timezone=True))
    completed_at = Column(DateTime(timezone=True))
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # Relationships
    game_type = relationship("GameType", back_populates="sessions")
    participants = relationship("SessionParticipant", back_populates="session", cascade="all, delete-orphan")
    games = relationship("Game", back_populates="session", cascade="all, delete-orphan")


class SessionParticipant(Base):
    """–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Å—Å–∏–π"""
    __tablename__ = "session_participants"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    session_id = Column(UUID(as_uuid=True), ForeignKey("game_sessions.id", ondelete="CASCADE"), nullable=False)
    user_id = Column(UUID(as_uuid=True))  # NULL –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    display_name = Column(String(255), nullable=False)
    session_role = Column(String(50), default="participant")  # 'creator', 'participant', 'spectator'
    is_empty_user = Column(Boolean, default=False)
    joined_at = Column(DateTime(timezone=True), server_default=func.now())
    left_at = Column(DateTime(timezone=True))
    queue_position = Column(Integer)
    current_score = Column(Integer, default=0)
    is_active = Column(Boolean, default=True)
    
    # –ü—Ä–∞–≤–∞ –≤ —Å–µ—Å—Å–∏–∏
    can_modify_settings = Column(Boolean, default=False)
    can_kick_players = Column(Boolean, default=False)
    can_change_rules = Column(Boolean, default=False)
    invited_by_user_id = Column(UUID(as_uuid=True))
    
    # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–≥—Ä—ã "–ö–æ–ª—Ö–æ–∑"
    session_balance_rubles = Column(Numeric(10, 2), default=0.00)
    total_games_played = Column(Integer, default=0)
    total_balls_potted = Column(Integer, default=0)
    
    # Relationships
    session = relationship("GameSession", back_populates="participants")
    game_results = relationship("GameResult", back_populates="participant")
    game_events = relationship("GameEvent", back_populates="participant")


class Game(Base):
    """–û—Ç–¥–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏"""
    __tablename__ = "games"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    session_id = Column(UUID(as_uuid=True), ForeignKey("game_sessions.id", ondelete="CASCADE"), nullable=False)
    game_number = Column(Integer, nullable=False)  # –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏
    status = Column(String(50), default="in_progress")  # in_progress, completed, cancelled
    winner_participant_id = Column(UUID(as_uuid=True), ForeignKey("session_participants.id"))
    started_at = Column(DateTime(timezone=True), server_default=func.now())
    completed_at = Column(DateTime(timezone=True))
    duration_seconds = Column(Integer)
    game_data = Column(JSON)  # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    
    # Relationships
    session = relationship("GameSession", back_populates="games")
    winner = relationship("SessionParticipant", foreign_keys=[winner_participant_id])
    events = relationship("GameEvent", back_populates="game", cascade="all, delete-orphan")
    results = relationship("GameResult", back_populates="game", cascade="all, delete-orphan")


class GameEvent(Base):
    """–°–æ–±—ã—Ç–∏—è –≤ –∏–≥—Ä–∞—Ö (—É–¥–∞—Ä—ã, —Ñ–æ–ª—ã, etc.)"""
    __tablename__ = "game_events"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    game_id = Column(UUID(as_uuid=True), ForeignKey("games.id", ondelete="CASCADE"), nullable=False)
    participant_id = Column(UUID(as_uuid=True), ForeignKey("session_participants.id"), nullable=False)
    event_type = Column(String(100), nullable=False)  # 'shot', 'foul', 'combo', 'break', etc.
    event_data = Column(JSON)  # –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
    sequence_number = Column(Integer, nullable=False)  # –ü–æ—Ä—è–¥–æ–∫ —Å–æ–±—ã—Ç–∏–π
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    game = relationship("Game", back_populates="events")
    participant = relationship("SessionParticipant", back_populates="game_events")


class GameResult(Base):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∏–≥—Ä–µ (–¥–ª—è –∏–≥—Ä—ã "–ö–æ–ª—Ö–æ–∑")"""
    __tablename__ = "game_results"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    game_id = Column(UUID(as_uuid=True), ForeignKey("games.id", ondelete="CASCADE"), nullable=False)
    participant_id = Column(UUID(as_uuid=True), ForeignKey("session_participants.id"), nullable=False)
    queue_position_in_game = Column(Integer, nullable=False)  # –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
    balls_potted = Column(Integer, default=0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–∏—Ç—ã—Ö —à–∞—Ä–æ–≤ –≤ –∏–≥—Ä–µ
    points_scored = Column(Integer, default=0)  # –û—á–∫–∏ –≤ –∏–≥—Ä–µ (—Å—É–º–º–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —à–∞—Ä–æ–≤)
    rubles_earned = Column(Numeric(10, 2), default=0.00)  # –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä—É–±–ª–µ–π (–æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞)
    rubles_paid = Column(Numeric(10, 2), default=0.00)  # –ó–∞–ø–ª–∞—á–µ–Ω–æ —Ä—É–±–ª–µ–π (—Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É)
    net_result_rubles = Column(Numeric(10, 2), default=0.00)  # –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (earned - paid)
    point_value_rubles = Column(Numeric(5, 2), nullable=False)  # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –æ—á–∫–∞ –≤ —Ä—É–±–ª—è—Ö
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    game = relationship("Game", back_populates="results")
    participant = relationship("SessionParticipant", back_populates="game_results")


# –ò–Ω–¥–µ–∫—Å—ã
Index("idx_sessions_creator", GameSession.creator_user_id)
Index("idx_sessions_status", GameSession.status)
Index("idx_sessions_type", GameSession.game_type_id)
Index("idx_participants_session", SessionParticipant.session_id)
Index("idx_participants_user", SessionParticipant.user_id)
Index("idx_participants_role", SessionParticipant.session_id, SessionParticipant.session_role)
Index("idx_participants_invited_by", SessionParticipant.invited_by_user_id)
Index("idx_games_session", Game.session_id)
Index("idx_events_game", GameEvent.game_id)
Index("idx_events_sequence", GameEvent.game_id, GameEvent.sequence_number)
Index("idx_results_game", GameResult.game_id)
Index("idx_results_participant", GameResult.participant_id)
Index("idx_results_queue", GameResult.game_id, GameResult.queue_position_in_game)