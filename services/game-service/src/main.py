"""
Game Service Main Application
"""

import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware

from .core.database import connect_to_db, disconnect_from_db, create_tables, init_sqlalchemy
from .core.config import settings
from .api import health, sessions, games

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        print(f"üéÆ Starting Game Service...")
        print(f"üìä Environment: {settings.environment}")
        print(f"üîß Debug mode: {settings.debug}")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await connect_to_db()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (—Ç–æ–ª—å–∫–æ –≤ development)
        if settings.environment == "development":
            await create_tables()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLAlchemy
        await init_sqlalchemy()
        
        # TODO: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
        print("üê∞ RabbitMQ connection: placeholder")
        
        # TODO: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        print("üü• Redis connection: placeholder")
        
        print("‚úÖ Game Service started successfully!")
        yield
        
    except Exception as e:
        print(f"‚ùå Error during startup: {e}")
        raise
    finally:
        print("üõë Shutting down Game Service...")
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await disconnect_from_db()
        
        print("‚úÖ Game Service shut down completed")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Artel Billiards - Game Service",
    version="1.0.0",
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏ –∏ —Å–µ—Å—Å–∏—è–º–∏",
    lifespan=lifespan
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    logger.info(f"üì• {request.method} {request.url}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è POST/PUT
    if request.method in ["POST", "PUT"]:
        try:
            body = await request.body()
            if body:
                logger.info(f"üì¶ Request body: {body.decode()}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not read request body: {e}")
    
    response = await call_next(request)
    
    logger.info(f"üì§ {request.method} {request.url} - {response.status_code}")
    return response

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:5173", "http://localhost:8000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(health.router)
app.include_router(sessions.router, prefix="/api/v1")
app.include_router(games.router, prefix="/api/v1")


@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "service": "Artel Billiards Game Service",
        "version": "1.0.0",
        "status": "running",
        "python_version": "3.13",
        "environment": settings.environment,
        "endpoints": {
            "health": "/health",
            "sessions": "/api/v1/sessions",
            "games": "/api/v1/games"
        }
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=settings.service_port)