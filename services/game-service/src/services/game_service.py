"""
Game Service - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏ –∏ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
"""

import random
import math
from datetime import datetime
from decimal import Decimal
from typing import List, Optional, Dict, Any
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from ..models.schemas import (
    CreateGameRequest, GameResponse, GameEventRequest, KolkhozBallPottedEvent,
    GameEventResponse, GameResultResponse, GameScoresResponse,
    QueueGenerationRequest, QueueResponse, GameStatus, GameEventType
)
from ..models.database import Game, GameQueue, GameSession, SessionParticipant, GameEvent
from .queue_algorithms import get_queue_algorithm


class GameService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏"""
    
    @staticmethod
    def _map_db_status_to_frontend(db_status: str) -> str:
        """–ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –ë–î –≤ frontend —Å—Ç–∞—Ç—É—Å—ã"""
        status_mapping = {
            'active': 'in_progress',  # üîÑ –ú–ê–ü–ü–ò–ù–ì: 'active' -> 'in_progress'
            'completed': 'completed',
            'cancelled': 'cancelled'
        }
        return status_mapping.get(db_status, db_status)
    
    @staticmethod
    async def create_game(
        db: AsyncSession, 
        session_id: UUID, 
        request: CreateGameRequest
    ) -> GameResponse:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏"""
        
        try:
            print(f"üéÆ GameService.create_game: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            print(f"üéÆ GameService.create_game: Request: {request}")
            print(f"üéÆ GameService.create_game: –¢–∏–ø session_id: {type(session_id)}")
            print(f"üéÆ GameService.create_game: session_id –∑–Ω–∞—á–µ–Ω–∏–µ: {session_id}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            print(f"üéÆ GameService.create_game: –®–∞–≥ 1 - –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é")
            session_query = select(GameSession).where(GameSession.id == session_id)
            print(f"üéÆ GameService.create_game: SQL –∑–∞–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏: {session_query}")
            
            session_result = await db.execute(session_query)
            session = session_result.scalar_one_or_none()
            
            if not session:
                print(f"‚ùå GameService.create_game: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                raise ValueError(f"Session {session_id} not found")
            
            print(f"üéÆ GameService.create_game: –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: {session.id}, —Å—Ç–∞—Ç—É—Å: {session.status}")
            print(f"üéÆ GameService.create_game: –¢–∏–ø session.id: {type(session.id)}")
            print(f"üéÆ GameService.create_game: session.id –∑–Ω–∞—á–µ–Ω–∏–µ: {session.id}")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
            print(f"üéÆ GameService.create_game: –®–∞–≥ 2 - –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            participants_query = select(SessionParticipant).where(
                SessionParticipant.session_id == session_id
            )
            participants_result = await db.execute(participants_query)
            participants = participants_result.scalars().all()
            
            if not participants:
                print(f"‚ùå GameService.create_game: –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                raise ValueError(f"No participants found in session {session_id}")
            
            print(f"üéÆ GameService.create_game: –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
            for p in participants:
                print(f"üéÆ GameService.create_game: –£—á–∞—Å—Ç–Ω–∏–∫: {p.id}, {p.display_name}")
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
            print(f"üéÆ GameService.create_game: –®–∞–≥ 3 - –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–≥—Ä—ã")
            game_number_query = select(func.coalesce(func.max(Game.game_number), 0)).where(
                Game.session_id == session_id
            )
            game_number_result = await db.execute(game_number_query)
            next_game_number = game_number_result.scalar() + 1
            
            print(f"üéÆ GameService.create_game: –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∏–≥—Ä—ã: {next_game_number}")
            
            # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É
            print(f"üéÆ GameService.create_game: –®–∞–≥ 4 - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å")
            
            # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º queue_algorithm –∏–∑ —à–∞–±–ª–æ–Ω–∞ —Å–µ—Å—Å–∏–∏
            if session.template_id:
                print(f"üéÆ GameService.create_game: –°–µ—Å—Å–∏—è –∏–º–µ–µ—Ç —à–∞–±–ª–æ–Ω: {session.template_id}")
                # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ template-service
                try:
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å template-service
                    queue_algorithm = "random_no_repeat"
                    print(f"üéÆ GameService.create_game: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ —à–∞–±–ª–æ–Ω–∞: {queue_algorithm}")
                except Exception as e:
                    print(f"‚ö†Ô∏è GameService.create_game: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
                    queue_algorithm = "random_no_repeat"  # fallback
            else:
                print(f"üéÆ GameService.create_game: –°–µ—Å—Å–∏—è –Ω–µ –∏–º–µ–µ—Ç —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º")
                queue_algorithm = "random_no_repeat"  # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            
            # üîÑ –£–ë–ò–†–ê–ï–ú: –ù–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ frontend –¥–ª—è queue_algorithm
            # queue_algorithm = request.queue_algorithm or "manual"
            
            algorithm_func = get_queue_algorithm(queue_algorithm)
            print(f"üéÆ GameService.create_game: –ê–ª–≥–æ—Ä–∏—Ç–º: {queue_algorithm}")
            
            if queue_algorithm == "random_no_repeat":
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–µ–π –¥–ª—è random_no_repeat
                print(f"üéÆ GameService.create_game: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—á–µ—Ä–µ–¥–µ–π")
                queue_history_query = select(GameQueue.queue_order).where(
                    GameQueue.session_id == session_id,
                    GameQueue.algorithm_used == "random_no_repeat"
                ).order_by(GameQueue.created_at.desc())
                
                queue_history_result = await db.execute(queue_history_query)
                previous_queues = [row[0] for row in queue_history_result.fetchall()]
                
                print(f"üéÆ GameService.create_game: –ò—Å—Ç–æ—Ä–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {len(previous_queues)} –∑–∞–ø–∏—Å–µ–π")
                print(f"üéÆ GameService.create_game: –î–µ—Ç–∞–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—á–µ—Ä–µ–¥–µ–π:")
                for i, queue in enumerate(previous_queues):
                    print(f"üéÆ GameService.create_game:   –û—á–µ—Ä–µ–¥—å {i+1}: {queue}")
                
                # üîÑ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–´–ó–û–í–ê –ê–õ–ì–û–†–ò–¢–ú–ê
                print(f"üéÆ GameService.create_game: –í–´–ó–´–í–ê–ï–ú –ê–õ–ì–û–†–ò–¢–ú random_no_repeat")
                print(f"üéÆ GameService.create_game: algorithm_func: {algorithm_func}")
                print(f"üéÆ GameService.create_game: participants: {[f'{p.id}:{p.display_name}' for p in participants]}")
                print(f"üéÆ GameService.create_game: session_id: {session_id}")
                print(f"üéÆ GameService.create_game: previous_queues: {previous_queues}")
                
                # –î–ª—è random_no_repeat –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ UUID –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                current_queue = algorithm_func(participants, session_id, previous_queues)
                
                print(f"üéÆ GameService.create_game: –ê–õ–ì–û–†–ò–¢–ú –í–´–ü–û–õ–ù–ï–ù")
                print(f"üéÆ GameService.create_game: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {[f'{p.id}:{p.display_name}' for p in current_queue]}")
            else:
                # –î–ª—è always_random –∏ manual –Ω–µ –Ω—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è
                print(f"üéÆ GameService.create_game: –í–´–ó–´–í–ê–ï–ú –ê–õ–ì–û–†–ò–¢–ú {queue_algorithm}")
                current_queue = algorithm_func(participants)
                print(f"üéÆ GameService.create_game: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {[f'{p.id}:{p.display_name}' for p in current_queue]}")
            
            print(f"üéÆ GameService.create_game: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –æ—á–µ—Ä–µ–¥—å: {len(current_queue)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            # üîÑ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø current_queue_ids
            print(f"üéÆ GameService.create_game: –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø current_queue_ids")
            print(f"üéÆ GameService.create_game: current_queue (–æ–±—ä–µ–∫—Ç—ã): {current_queue}")
            print(f"üéÆ GameService.create_game: –¢–∏–ø current_queue: {type(current_queue)}")
            print(f"üéÆ GameService.create_game: –î–ª–∏–Ω–∞ current_queue: {len(current_queue)}")
            
            for i, participant in enumerate(current_queue):
                print(f"üéÆ GameService.create_game:   –£—á–∞—Å—Ç–Ω–∏–∫ {i+1}: id={participant.id}, display_name={participant.display_name}")
                print(f"üéÆ GameService.create_game:   –¢–∏–ø participant.id: {type(participant.id)}")
                print(f"üéÆ GameService.create_game:   participant.id –∑–Ω–∞—á–µ–Ω–∏–µ: {participant.id}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            current_queue_ids = [str(participant.id) for participant in current_queue]
            print(f"üéÆ GameService.create_game: ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {current_queue_ids}")
            print(f"üéÆ GameService.create_game: –¢–∏–ø current_queue_ids: {type(current_queue_ids)}")
            print(f"üéÆ GameService.create_game: –î–ª–∏–Ω–∞ current_queue_ids: {len(current_queue_ids)}")
            
            # üîÑ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –û–ë–™–ï–ö–¢–ê GAME
            print(f"üéÆ GameService.create_game: –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –û–ë–™–ï–ö–¢–ê GAME")
            print(f"üéÆ GameService.create_game: session_id: {session_id}")
            print(f"üéÆ GameService.create_game: next_game_number: {next_game_number}")
            print(f"üéÆ GameService.create_game: queue_algorithm: {queue_algorithm}")
            print(f"üéÆ GameService.create_game: current_queue_ids: {current_queue_ids}")
            
            # 5. –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –ë–î
            print(f"üéÆ GameService.create_game: –®–∞–≥ 5 - –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –ë–î")
            game = Game(
                session_id=session_id,
                game_number=next_game_number,
                status="active",
                queue_algorithm=queue_algorithm,
                current_queue=current_queue_ids
            )
            
            print(f"üéÆ GameService.create_game: –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω: {game}")
            print(f"üéÆ GameService.create_game: game.session_id: {game.session_id}")
            print(f"üéÆ GameService.create_game: game.status: {game.status}")
            print(f"üéÆ GameService.create_game: game.current_queue: {game.current_queue}")
            print(f"üéÆ GameService.create_game: –¢–∏–ø game.current_queue: {type(game.current_queue)}")
            db.add(game)
            print(f"üéÆ GameService.create_game: –ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é")
            
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä—ã
            print(f"üéÆ GameService.create_game: ID –∏–≥—Ä—ã –ø–æ–ª—É—á–µ–Ω: {game.id}")
            
            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è random_no_repeat)
            if queue_algorithm == "random_no_repeat":
                print(f"üéÆ GameService.create_game: –®–∞–≥ 6 - –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—á–µ—Ä–µ–¥–∏")
                print(f"üéÆ GameService.create_game: –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø –í GAME_QUEUES")
                print(f"üéÆ GameService.create_game: session_id: {session_id}")
                print(f"üéÆ GameService.create_game: game.id: {game.id}")
                print(f"üéÆ GameService.create_game: current_queue_ids: {current_queue_ids}")
                print(f"üéÆ GameService.create_game: queue_algorithm: {queue_algorithm}")
                
                queue_record = GameQueue(
                    session_id=session_id,
                    game_id=game.id,
                    queue_order=current_queue_ids,
                    algorithm_used=queue_algorithm
                )
                print(f"üéÆ GameService.create_game: –û–±—ä–µ–∫—Ç GameQueue —Å–æ–∑–¥–∞–Ω: {queue_record}")
                print(f"üéÆ GameService.create_game: queue_record.queue_order: {queue_record.queue_order}")
                print(f"üéÆ GameService.create_game: –¢–∏–ø queue_record.queue_order: {type(queue_record.queue_order)}")
                
                db.add(queue_record)
                print(f"üéÆ GameService.create_game: –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
            # 6.5. üîÑ –ù–û–í–´–ô –®–ê–ì: –û–±–Ω–æ–≤–ª—è–µ–º queue_position –≤ session_participants
            print(f"üéÆ GameService.create_game: –®–∞–≥ 6.5 - –û–±–Ω–æ–≤–ª—è–µ–º queue_position –≤ session_participants")
            for position, participant in enumerate(current_queue):
                # –û–±–Ω–æ–≤–ª—è–µ–º queue_position –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                participant.queue_position = position + 1
                print(f"üéÆ GameService.create_game: {participant.display_name} -> queue_position: {position + 1}")
            
            # 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
            print(f"üéÆ GameService.create_game: –®–∞–≥ 7 - –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é")
            session.current_game_id = game.id
            session.status = "in_progress"
            
            print(f"üéÆ GameService.create_game: –ì–æ—Ç–æ–≤—ã –∫ –∫–æ–º–º–∏—Ç—É")
            await db.commit()
            print(f"üéÆ GameService.create_game: –ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 8. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∏–≥—Ä—É
            print(f"üéÆ GameService.create_game: –®–∞–≥ 8 - –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            result = GameResponse(
                id=game.id,
                session_id=game.session_id,
                game_number=game.game_number,
                status=GameService._map_db_status_to_frontend(game.status),  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥
                winner_participant_id=None,
                started_at=game.started_at,
                completed_at=game.completed_at,
                duration_seconds=None,
                game_data={
                    "queue_algorithm": game.queue_algorithm,
                    "current_queue": game.current_queue,
                    "custom_queue": request.custom_queue
                }
            )
            
            print(f"üéÆ GameService.create_game: –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {result.id}")
            print(f"üéÆ GameService.create_game: result.session_id: {result.session_id}")
            print(f"üéÆ GameService.create_game: result.status: {result.status}")
            print(f"üéÆ GameService.create_game: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç: {result}")
            return result
            
        except Exception as e:
            print(f"‚ùå GameService.create_game: –û—à–∏–±–∫–∞: {str(e)}")
            print(f"‚ùå GameService.create_game: –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            print(f"‚ùå GameService.create_game: Traceback: {traceback.format_exc()}")
            raise
    
    @staticmethod
    async def get_game(db: AsyncSession, game_id: UUID) -> Optional[GameResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ"""
        
        game_query = select(Game).where(Game.id == game_id)
        game_result = await db.execute(game_query)
        game = game_result.scalar_one_or_none()
        
        if not game:
            return None
        
        return GameResponse(
            id=game.id,
            session_id=game.session_id,
            game_number=game.game_number,
            status=GameService._map_db_status_to_frontend(game.status),  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥
            winner_participant_id=None,
            started_at=game.started_at,
            completed_at=game.completed_at,
            duration_seconds=None,
            game_data={
                "queue_algorithm": game.queue_algorithm,
                "current_queue": game.current_queue
            }
        )
    
    @staticmethod
    async def get_session_games(
        db: AsyncSession, 
        session_id: UUID, 
        limit: int = 10, 
        offset: int = 0
    ) -> List[GameResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –≤ —Å–µ—Å—Å–∏–∏"""
        
        print(f"üéÆ GameService.get_session_games: –ò—â–µ–º –∏–≥—Ä—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        
        games_query = select(Game).where(
            Game.session_id == session_id
        ).order_by(Game.game_number.desc()).offset(offset).limit(limit)
        
        print(f"üéÆ GameService.get_session_games: SQL –∑–∞–ø—Ä–æ—Å: {games_query}")
        
        games_result = await db.execute(games_query)
        games = games_result.scalars().all()
        
        print(f"üéÆ GameService.get_session_games: –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: {len(games)}")
        for game in games:
            print(f"üéÆ GameService.get_session_games: –ò–≥—Ä–∞ {game.id}, —Å—Ç–∞—Ç—É—Å: {game.status}, session_id: {game.session_id}")
        
        result = [
            GameResponse(
                id=game.id,
                session_id=game.session_id,
                game_number=game.game_number,
                status=GameService._map_db_status_to_frontend(game.status),  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥
                winner_participant_id=None,
                started_at=game.started_at,
                completed_at=game.completed_at,
                duration_seconds=None,
                game_data={
                    "queue_algorithm": game.queue_algorithm,
                    "current_queue": game.current_queue
                }
            )
            for game in games
        ]
        
        print(f"üéÆ GameService.get_session_games: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(result)} –∏–≥—Ä")
        return result
    
    @staticmethod
    async def get_active_game(db: AsyncSession, session_id: UUID) -> Optional[GameResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏"""
        
        active_game_query = select(Game).where(
            Game.session_id == session_id,
            Game.status == "active"
        )
        
        active_game_result = await db.execute(active_game_query)
        active_game = active_game_result.scalar_one_or_none()
        
        if not active_game:
            return None
        
        return GameResponse(
            id=active_game.id,
            session_id=active_game.session_id,
            game_number=active_game.game_number,
            status=GameService._map_db_status_to_frontend(active_game.status),  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥
            winner_participant_id=None,
            started_at=active_game.started_at,
            completed_at=active_game.completed_at,
            duration_seconds=None,
            game_data={
                "queue_algorithm": active_game.queue_algorithm,
                "current_queue": active_game.current_queue
            }
        )
    
    @staticmethod
    async def complete_game(db: AsyncSession, game_id: UUID) -> GameResponse:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        
        game_query = select(Game).where(Game.id == game_id)
        game_result = await db.execute(game_query)
        game = game_result.scalar_one_or_none()
        
        if not game:
            raise ValueError(f"Game {game_id} not found")
        
        if game.status != "active":
            raise ValueError(f"Game {game_id} is not active")
        
        # üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
        winner_participant_id = None
        game_statistics = {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            events_query = select(GameEvent).where(
                GameEvent.game_id == game_id,
                GameEvent.is_deleted == False
            ).order_by(GameEvent.sequence_number)
            
            events_result = await db.execute(events_query)
            game_events = events_result.scalars().all()
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            participant_stats = {}
            
            for event in game_events:
                participant_id = event.participant_id
                
                if participant_id not in participant_stats:
                    participant_stats[participant_id] = {
                        'points': 0,
                        'money': 0,
                        'balls': 0,
                        'fouls': 0
                    }
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–±–∏—Ç—ã—Ö —à–∞—Ä–æ–≤
                if event.event_type == 'ball_potted':
                    participant_stats[participant_id]['balls'] += 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—á–∫–∏ –∏ –¥–µ–Ω—å–≥–∏ –∏–∑ event_data
                    event_data = event.event_data or {}
                    points = event_data.get('points', 0)
                    money = event_data.get('money', 0)
                    
                    participant_stats[participant_id]['points'] += points
                    participant_stats[participant_id]['money'] += money
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ—ã
                elif event.event_type == 'foul':
                    participant_stats[participant_id]['fouls'] += 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º —à—Ç—Ä–∞—Ñ –∏–∑ event_data
                    event_data = event.event_data or {}
                    penalty = event_data.get('penalty', 0)
                    
                    participant_stats[participant_id]['money'] -= penalty
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –æ—á–∫–∞–º
            if participant_stats:
                winner_id = max(participant_stats.keys(), 
                              key=lambda pid: participant_stats[pid]['points'])
                winner_participant_id = winner_id
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ game_data
                game_statistics = {
                    'participant_stats': participant_stats,
                    'winner_participant_id': str(winner_participant_id),
                    'total_balls': sum(stats['balls'] for stats in participant_stats.values()),
                    'total_fouls': sum(stats['fouls'] for stats in participant_stats.values()),
                    'completion_timestamp': datetime.now().isoformat()
                }
                
                print(f"üéØ GameService.complete_game: –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {winner_participant_id}")
                print(f"üéØ GameService.complete_game: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {game_statistics}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è GameService.complete_game: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        game.status = "completed"
        game.completed_at = datetime.now()
        
        # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
        # –°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∏–≥—Ä
        session_query = select(GameSession).where(GameSession.id == game.session_id)
        session_result = await db.execute(session_query)
        session = session_result.scalar_one_or_none()
        
        if session and session.current_game_id == game_id:
            # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
            session.current_game_id = None
            # üîÑ –ù–ï –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –Ω–∞ "completed"!
            # session.status –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–æ–±—ã—á–Ω–æ "active")
        
        await db.commit()
        
        return GameResponse(
            id=game.id,
            session_id=game.session_id,
            game_number=game.game_number,
            status=GameStatus.COMPLETED,
            winner_participant_id=winner_participant_id,
            started_at=game.started_at,
            completed_at=game.completed_at,
            duration_seconds=None,
            game_data={
                "queue_algorithm": game.queue_algorithm,
                "current_queue": game.current_queue,
                "statistics": game_statistics  # üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            }
        )
    
    @staticmethod
    async def add_game_event(
        db: AsyncSession, 
        game_id: UUID, 
        request: GameEventRequest
    ) -> GameEventResponse:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        
        try:
            print(f"üéÆ GameService.add_game_event: –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–≥—Ä—ã {game_id}")
            print(f"üéÆ GameService.add_game_event: Request: {request}")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
            game_query = select(Game).where(Game.id == game_id)
            game_result = await db.execute(game_query)
            game = game_result.scalar_one_or_none()
            
            if not game:
                print(f"‚ùå GameService.add_game_event: –ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                raise ValueError(f"Game {game_id} not found")
            
            print(f"üéÆ GameService.add_game_event: –ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞: {game.id}, —Å—Ç–∞—Ç—É—Å: {game.status}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            participant_query = select(SessionParticipant).where(SessionParticipant.id == request.participant_id)
            participant_result = await db.execute(participant_query)
            participant = participant_result.scalar_one_or_none()
            
            if not participant:
                print(f"‚ùå GameService.add_game_event: –£—á–∞—Å—Ç–Ω–∏–∫ {request.participant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                raise ValueError(f"Participant {request.participant_id} not found")
            
            print(f"üéÆ GameService.add_game_event: –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω: {participant.id}, {participant.display_name}")
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            sequence_query = select(func.coalesce(func.max(GameEvent.sequence_number), 0)).where(
                GameEvent.game_id == game_id
            )
            sequence_result = await db.execute(sequence_query)
            next_sequence = sequence_result.scalar() + 1
            
            print(f"üéÆ GameService.add_game_event: –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {next_sequence}")
            
            # 4. –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            new_event = GameEvent(
                game_id=game_id,
                participant_id=request.participant_id,
                event_type=request.event_type.value if hasattr(request.event_type, 'value') else str(request.event_type),
                event_data=request.event_data,
                sequence_number=next_sequence
            )
            
            db.add(new_event)
            await db.commit()
            await db.refresh(new_event)
            
            print(f"‚úÖ GameService.add_game_event: –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î —Å ID: {new_event.id}")
            
            # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
            return GameEventResponse(
                id=new_event.id,
                game_id=new_event.game_id,
                participant_id=new_event.participant_id,
                event_type=request.event_type,
                event_data=new_event.event_data,
                sequence_number=new_event.sequence_number,
                created_at=new_event.created_at
            )
            
        except Exception as e:
            print(f"‚ùå GameService.add_game_event: –û—à–∏–±–∫–∞: {str(e)}")
            await db.rollback()
            raise
    
    @staticmethod
    async def get_game_events(
        db: AsyncSession, 
        game_id: UUID, 
        limit: int = 50, 
        offset: int = 0
    ) -> List[GameEventResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã"""
        
        try:
            print(f"üéÆ GameService.get_game_events: –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–≥—Ä—ã {game_id}")
            print(f"üéÆ GameService.get_game_events: limit={limit}, offset={offset}")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
            game_query = select(Game).where(Game.id == game_id)
            game_result = await db.execute(game_query)
            game = game_result.scalar_one_or_none()
            
            if not game:
                print(f"‚ùå GameService.get_game_events: –ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return []
            
            print(f"üéÆ GameService.get_game_events: –ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞: {game.id}, —Å—Ç–∞—Ç—É—Å: {game.status}")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î
            events_query = select(GameEvent).where(
                GameEvent.game_id == game_id
            ).order_by(
                GameEvent.sequence_number.desc()
            ).offset(offset).limit(limit)
            
            print(f"üéÆ GameService.get_game_events: SQL –∑–∞–ø—Ä–æ—Å: {events_query}")
            
            events_result = await db.execute(events_query)
            events = events_result.scalars().all()
            
            print(f"üéÆ GameService.get_game_events: –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
            for event in events:
                print(f"üéÆ GameService.get_game_events: –°–æ–±—ã—Ç–∏–µ {event.id}: {event.event_type}, —É—á–∞—Å—Ç–Ω–∏–∫: {event.participant_id}, —É–¥–∞–ª–µ–Ω–æ: {getattr(event, 'is_deleted', False)}")
            
            # 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ GameEventResponse
            from ..models.schemas import GameEventType
            
            result = []
            for event in events:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                try:
                    event_type = GameEventType(event.event_type)
                except ValueError:
                    # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    event_type = event.event_type
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤ event_data
                event_data = event.event_data or {}
                if hasattr(event, 'is_deleted') and event.is_deleted:
                    event_data['is_deleted'] = True
                
                response = GameEventResponse(
                    id=event.id,
                    game_id=event.game_id,
                    participant_id=event.participant_id,
                    event_type=event_type,
                    event_data=event_data,
                    sequence_number=event.sequence_number,
                    created_at=event.created_at
                )
                result.append(response)
            
            print(f"üéÆ GameService.get_game_events: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(result)} —Å–æ–±—ã—Ç–∏–π")
            return result
            
        except Exception as e:
            print(f"‚ùå GameService.get_game_events: –û—à–∏–±–∫–∞: {str(e)}")
            return []
    
    @staticmethod
    async def get_game_scores(db: AsyncSession, game_id: UUID) -> GameScoresResponse:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å—á–µ—Ç–æ–≤ –∏–≥—Ä—ã"""
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –∏–∑ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return GameScoresResponse(
            current_scores=[
                GameResultResponse(
                    id=UUID("score123-4567-8901-2345-678901234567"),
                    game_id=game_id,
                    participant_id=UUID("87654321-4321-8765-cba9-987654321abc"),
                    queue_position_in_game=1,
                    balls_potted=5,
                    points_scored=250,
                    rubles_earned=Decimal("125.00"),
                    rubles_paid=Decimal("75.00"),
                    net_result_rubles=Decimal("50.00"),
                    point_value_rubles=Decimal("50.00"),
                    created_at=datetime.now()
                )
            ],
            game_status=GameStatus.IN_PROGRESS,
            winner_participant_id=None
        )

    @staticmethod
    async def delete_game_event(
        db: AsyncSession, 
        game_id: UUID, 
        event_id: UUID, 
        current_user: UUID
    ) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä—ã (–ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ)"""
        
        try:
            print(f"üéÆ GameService.delete_game_event: –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id} –¥–ª—è –∏–≥—Ä—ã {game_id}")
            print(f"üéÆ GameService.delete_game_event: current_user: {current_user}")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
            game_query = select(Game).where(Game.id == game_id)
            game_result = await db.execute(game_query)
            game = game_result.scalar_one_or_none()
            
            if not game:
                print(f"‚ùå GameService.delete_game_event: –ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                raise ValueError(f"Game {game_id} not found")
            
            print(f"üéÆ GameService.delete_game_event: –ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞: {game.id}, —Å—Ç–∞—Ç—É—Å: {game.status}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            event_query = select(GameEvent).where(
                GameEvent.id == event_id,
                GameEvent.game_id == game_id
            )
            event_result = await db.execute(event_query)
            event = event_result.scalar_one_or_none()
            
            if not event:
                print(f"‚ùå GameService.delete_game_event: –°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                raise ValueError(f"Event {event_id} not found")
            
            print(f"üéÆ GameService.delete_game_event: –°–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {event.id}, —Ç–∏–ø: {event.event_type}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ creator —Å–µ—Å—Å–∏–∏ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è)
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ Auth Service
            print(f"üéÆ GameService.delete_game_event: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
            
            # 4. –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ
            event.is_deleted = True
            await db.commit()
            
            print(f"üéÆ GameService.delete_game_event: –°–æ–±—ã—Ç–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ")
            
            return {
                "success": True,
                "message": f"Event {event_id} marked as deleted"
            }
            
        except Exception as e:
            print(f"‚ùå GameService.delete_game_event: –û—à–∏–±–∫–∞: {str(e)}")
            await db.rollback()
            raise