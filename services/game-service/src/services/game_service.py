"""
Game Service - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏ –∏ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
"""

import random
import math
from datetime import datetime
from decimal import Decimal
from typing import List, Optional, Dict, Any
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from ..models.schemas import (
    CreateGameRequest, GameResponse, GameEventRequest, KolkhozBallPottedEvent,
    GameEventResponse, GameResultResponse, GameScoresResponse,
    QueueGenerationRequest, QueueResponse, GameStatus, GameEventType
)
from ..models.database import Game, GameQueue, GameSession, SessionParticipant
from .queue_algorithms import get_queue_algorithm


class GameService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏"""
    
    @staticmethod
    def _map_db_status_to_frontend(db_status: str) -> str:
        """–ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –ë–î –≤ frontend —Å—Ç–∞—Ç—É—Å—ã"""
        status_mapping = {
            'active': 'in_progress',  # üîÑ –ú–ê–ü–ü–ò–ù–ì: 'active' -> 'in_progress'
            'completed': 'completed',
            'cancelled': 'cancelled'
        }
        return status_mapping.get(db_status, db_status)
    
    @staticmethod
    async def create_game(
        db: AsyncSession, 
        session_id: UUID, 
        request: CreateGameRequest
    ) -> GameResponse:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏"""
        
        try:
            print(f"üéÆ GameService.create_game: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            print(f"üéÆ GameService.create_game: Request: {request}")
            print(f"üéÆ GameService.create_game: –¢–∏–ø session_id: {type(session_id)}")
            print(f"üéÆ GameService.create_game: session_id –∑–Ω–∞—á–µ–Ω–∏–µ: {session_id}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            print(f"üéÆ GameService.create_game: –®–∞–≥ 1 - –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é")
            session_query = select(GameSession).where(GameSession.id == session_id)
            print(f"üéÆ GameService.create_game: SQL –∑–∞–ø—Ä–æ—Å —Å–µ—Å—Å–∏–∏: {session_query}")
            
            session_result = await db.execute(session_query)
            session = session_result.scalar_one_or_none()
            
            if not session:
                print(f"‚ùå GameService.create_game: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                raise ValueError(f"Session {session_id} not found")
            
            print(f"üéÆ GameService.create_game: –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: {session.id}, —Å—Ç–∞—Ç—É—Å: {session.status}")
            print(f"üéÆ GameService.create_game: –¢–∏–ø session.id: {type(session.id)}")
            print(f"üéÆ GameService.create_game: session.id –∑–Ω–∞—á–µ–Ω–∏–µ: {session.id}")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
            print(f"üéÆ GameService.create_game: –®–∞–≥ 2 - –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            participants_query = select(SessionParticipant).where(
                SessionParticipant.session_id == session_id
            )
            participants_result = await db.execute(participants_query)
            participants = participants_result.scalars().all()
            
            if not participants:
                print(f"‚ùå GameService.create_game: –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                raise ValueError(f"No participants found in session {session_id}")
            
            print(f"üéÆ GameService.create_game: –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
            for p in participants:
                print(f"üéÆ GameService.create_game: –£—á–∞—Å—Ç–Ω–∏–∫: {p.id}, {p.display_name}")
            
            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
            print(f"üéÆ GameService.create_game: –®–∞–≥ 3 - –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–≥—Ä—ã")
            game_number_query = select(func.coalesce(func.max(Game.game_number), 0)).where(
                Game.session_id == session_id
            )
            game_number_result = await db.execute(game_number_query)
            next_game_number = game_number_result.scalar() + 1
            
            print(f"üéÆ GameService.create_game: –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∏–≥—Ä—ã: {next_game_number}")
            
            # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É
            print(f"üéÆ GameService.create_game: –®–∞–≥ 4 - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å")
            queue_algorithm = request.queue_algorithm or "manual"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç –µ—Å–ª–∏ None
            algorithm_func = get_queue_algorithm(queue_algorithm)
            
            print(f"üéÆ GameService.create_game: –ê–ª–≥–æ—Ä–∏—Ç–º: {queue_algorithm}")
            
            if queue_algorithm == "random_no_repeat":
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–µ–π –¥–ª—è random_no_repeat
                print(f"üéÆ GameService.create_game: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—á–µ—Ä–µ–¥–µ–π")
                queue_history_query = select(GameQueue.queue_order).where(
                    GameQueue.session_id == session_id,
                    GameQueue.algorithm_used == "random_no_repeat"
                ).order_by(GameQueue.created_at.desc())
                
                queue_history_result = await db.execute(queue_history_query)
                previous_queues = [row[0] for row in queue_history_result.fetchall()]
                
                print(f"üéÆ GameService.create_game: –ò—Å—Ç–æ—Ä–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {len(previous_queues)} –∑–∞–ø–∏—Å–µ–π")
                
                # –î–ª—è random_no_repeat –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ UUID –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                current_queue = algorithm_func(participants, session_id, previous_queues)
            else:
                # –î–ª—è always_random –∏ manual –Ω–µ –Ω—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è
                current_queue = algorithm_func(participants)
            
            print(f"üéÆ GameService.create_game: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –æ—á–µ—Ä–µ–¥—å: {len(current_queue)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            current_queue_ids = [str(participant.id) for participant in current_queue]
            print(f"üéÆ GameService.create_game: ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {current_queue_ids}")
            
            # 5. –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –ë–î
            print(f"üéÆ GameService.create_game: –®–∞–≥ 5 - –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –ë–î")
            game = Game(
                session_id=session_id,
                game_number=next_game_number,
                status="active",
                queue_algorithm=queue_algorithm,
                current_queue=current_queue_ids
            )
            
            print(f"üéÆ GameService.create_game: –û–±—ä–µ–∫—Ç –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω: {game}")
            print(f"üéÆ GameService.create_game: game.session_id: {game.session_id}")
            print(f"üéÆ GameService.create_game: game.status: {game.status}")
            db.add(game)
            print(f"üéÆ GameService.create_game: –ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é")
            
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä—ã
            print(f"üéÆ GameService.create_game: ID –∏–≥—Ä—ã –ø–æ–ª—É—á–µ–Ω: {game.id}")
            
            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è random_no_repeat)
            if queue_algorithm == "random_no_repeat":
                print(f"üéÆ GameService.create_game: –®–∞–≥ 6 - –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—á–µ—Ä–µ–¥–∏")
                queue_record = GameQueue(
                    session_id=session_id,
                    game_id=game.id,
                    queue_order=current_queue_ids,
                    algorithm_used=queue_algorithm
                )
                db.add(queue_record)
                print(f"üéÆ GameService.create_game: –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
            # 7. –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
            print(f"üéÆ GameService.create_game: –®–∞–≥ 7 - –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é")
            session.current_game_id = game.id
            session.status = "in_progress"
            
            print(f"üéÆ GameService.create_game: –ì–æ—Ç–æ–≤—ã –∫ –∫–æ–º–º–∏—Ç—É")
            await db.commit()
            print(f"üéÆ GameService.create_game: –ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # 8. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∏–≥—Ä—É
            print(f"üéÆ GameService.create_game: –®–∞–≥ 8 - –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            result = GameResponse(
                id=game.id,
                session_id=game.session_id,
                game_number=game.game_number,
                status=GameService._map_db_status_to_frontend(game.status),  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥
                winner_participant_id=None,
                started_at=game.started_at,
                completed_at=game.completed_at,
                duration_seconds=None,
                game_data={
                    "queue_algorithm": game.queue_algorithm,
                    "current_queue": game.current_queue,
                    "custom_queue": request.custom_queue
                }
            )
            
            print(f"üéÆ GameService.create_game: –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {result.id}")
            print(f"üéÆ GameService.create_game: result.session_id: {result.session_id}")
            print(f"üéÆ GameService.create_game: result.status: {result.status}")
            print(f"üéÆ GameService.create_game: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç: {result}")
            return result
            
        except Exception as e:
            print(f"‚ùå GameService.create_game: –û—à–∏–±–∫–∞: {str(e)}")
            print(f"‚ùå GameService.create_game: –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            print(f"‚ùå GameService.create_game: Traceback: {traceback.format_exc()}")
            raise
    
    @staticmethod
    async def get_game(db: AsyncSession, game_id: UUID) -> Optional[GameResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ"""
        
        game_query = select(Game).where(Game.id == game_id)
        game_result = await db.execute(game_query)
        game = game_result.scalar_one_or_none()
        
        if not game:
            return None
        
        return GameResponse(
            id=game.id,
            session_id=game.session_id,
            game_number=game.game_number,
            status=GameService._map_db_status_to_frontend(game.status),  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥
            winner_participant_id=None,
            started_at=game.started_at,
            completed_at=game.completed_at,
            duration_seconds=None,
            game_data={
                "queue_algorithm": game.queue_algorithm,
                "current_queue": game.current_queue
            }
        )
    
    @staticmethod
    async def get_session_games(
        db: AsyncSession, 
        session_id: UUID, 
        limit: int = 10, 
        offset: int = 0
    ) -> List[GameResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –≤ —Å–µ—Å—Å–∏–∏"""
        
        print(f"üéÆ GameService.get_session_games: –ò—â–µ–º –∏–≥—Ä—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        
        games_query = select(Game).where(
            Game.session_id == session_id
        ).order_by(Game.game_number.desc()).offset(offset).limit(limit)
        
        print(f"üéÆ GameService.get_session_games: SQL –∑–∞–ø—Ä–æ—Å: {games_query}")
        
        games_result = await db.execute(games_query)
        games = games_result.scalars().all()
        
        print(f"üéÆ GameService.get_session_games: –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä: {len(games)}")
        for game in games:
            print(f"üéÆ GameService.get_session_games: –ò–≥—Ä–∞ {game.id}, —Å—Ç–∞—Ç—É—Å: {game.status}, session_id: {game.session_id}")
        
        result = [
            GameResponse(
                id=game.id,
                session_id=game.session_id,
                game_number=game.game_number,
                status=GameService._map_db_status_to_frontend(game.status),  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥
                winner_participant_id=None,
                started_at=game.started_at,
                completed_at=game.completed_at,
                duration_seconds=None,
                game_data={
                    "queue_algorithm": game.queue_algorithm,
                    "current_queue": game.current_queue
                }
            )
            for game in games
        ]
        
        print(f"üéÆ GameService.get_session_games: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(result)} –∏–≥—Ä")
        return result
    
    @staticmethod
    async def get_active_game(db: AsyncSession, session_id: UUID) -> Optional[GameResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —Å–µ—Å—Å–∏–∏"""
        
        active_game_query = select(Game).where(
            Game.session_id == session_id,
            Game.status == "active"
        )
        
        active_game_result = await db.execute(active_game_query)
        active_game = active_game_result.scalar_one_or_none()
        
        if not active_game:
            return None
        
        return GameResponse(
            id=active_game.id,
            session_id=active_game.session_id,
            game_number=active_game.game_number,
            status=GameService._map_db_status_to_frontend(active_game.status),  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥
            winner_participant_id=None,
            started_at=active_game.started_at,
            completed_at=active_game.completed_at,
            duration_seconds=None,
            game_data={
                "queue_algorithm": active_game.queue_algorithm,
                "current_queue": active_game.current_queue
            }
        )
    
    @staticmethod
    async def complete_game(db: AsyncSession, game_id: UUID) -> GameResponse:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        
        game_query = select(Game).where(Game.id == game_id)
        game_result = await db.execute(game_query)
        game = game_result.scalar_one_or_none()
        
        if not game:
            raise ValueError(f"Game {game_id} not found")
        
        if game.status != "active":
            raise ValueError(f"Game {game_id} is not active")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        game.status = "completed"
        game.completed_at = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
        session_query = select(GameSession).where(GameSession.id == game.session_id)
        session_result = await db.execute(session_query)
        session = session_result.scalar_one_or_none()
        
        if session and session.current_game_id == game_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
            other_active_games_query = select(Game).where(
                Game.session_id == game.session_id,
                Game.status == "active",
                Game.id != game_id
            )
            other_active_games_result = await db.execute(other_active_games_query)
            other_active_games = other_active_games_result.scalars().all()
            
            if not other_active_games:
                session.current_game_id = None
                session.status = "completed"
        
        await db.commit()
        
        return GameResponse(
            id=game.id,
            session_id=game.session_id,
            game_number=game.game_number,
            status=GameStatus.COMPLETED,
            winner_participant_id=None,
            started_at=game.started_at,
            completed_at=game.completed_at,
            duration_seconds=None,
            game_data={
                "queue_algorithm": game.queue_algorithm,
                "current_queue": game.current_queue
            }
        )
    
    @staticmethod
    async def add_game_event(
        db: AsyncSession, 
        game_id: UUID, 
        request: GameEventRequest
    ) -> GameEventResponse:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ –ë–î
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        event_id = UUID("fedcba98-7654-3210-fedc-ba9876543210")
        
        return GameEventResponse(
            id=event_id,
            game_id=game_id,
            participant_id=request.participant_id,
            event_type=request.event_type,
            event_data=request.event_data,
            sequence_number=1,
            created_at=datetime.now()
        )
    
    @staticmethod
    async def get_game_scores(db: AsyncSession, game_id: UUID) -> GameScoresResponse:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å—á–µ—Ç–æ–≤ –∏–≥—Ä—ã"""
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –∏–∑ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return GameScoresResponse(
            current_scores=[
                GameResultResponse(
                    id=UUID("score123-4567-8901-2345-678901234567"),
                    game_id=game_id,
                    participant_id=UUID("87654321-4321-8765-cba9-987654321abc"),
                    queue_position_in_game=1,
                    balls_potted=5,
                    points_scored=250,
                    rubles_earned=Decimal("125.00"),
                    rubles_paid=Decimal("75.00"),
                    net_result_rubles=Decimal("50.00"),
                    point_value_rubles=Decimal("50.00"),
                    created_at=datetime.now()
                )
            ],
            game_status=GameStatus.IN_PROGRESS,
            winner_participant_id=None
        )