"""
Session Service - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
"""

from datetime import datetime, timezone
from typing import List, Optional, Dict, Any
from uuid import UUID
from sqlalchemy.ext.asyncio import AsyncSession

# Database import removed - using direct connections now
from ..models.schemas import (
    CreateSessionRequest, UpdateSessionRequest, SessionResponse, SessionParticipantResponse,
    JoinSessionRequest, InvitePlayerRequest, SessionStatus, SessionRole,
    GameTypeResponse
)
from ..models.database import GameSession, SessionParticipant, GameType


class SessionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ (stub implementation)"""
    
    @staticmethod
    async def _ensure_game_types_exist(db: AsyncSession):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –∏–≥—Ä —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∏–ø—ã –∏–≥—Ä
        from sqlalchemy import select
        game_types_query = await db.execute(select(GameType))
        existing_types = game_types_query.scalars().all()
        
        if not existing_types:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –∏–≥—Ä
            basic_types = [
                GameType(
                    id=1,
                    name="kolkhoz",
                    display_name="–ö–æ–ª—Ö–æ–∑",
                    description="–ò–≥—Ä–∞ –ö–æ–ª—Ö–æ–∑ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞—Å—á–µ—Ç–æ–≤",
                    default_rules={"point_value_rubles": 50.0},
                    is_active=True
                ),
                GameType(
                    id=2,
                    name="americana",
                    display_name="–ê–º–µ—Ä–∏–∫–∞–Ω–∫–∞",
                    description="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –ê–º–µ—Ä–∏–∫–∞–Ω–∫–∞",
                    default_rules={"point_value_rubles": 30.0},
                    is_active=True
                ),
                GameType(
                    id=3,
                    name="moscow_pyramid",
                    display_name="–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞",
                    description="–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –º–æ—Å–∫–æ–≤—Å–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞",
                    default_rules={"point_value_rubles": 40.0},
                    is_active=True
                )
            ]
            
            for game_type in basic_types:
                db.add(game_type)
            
            await db.commit()
    
    @staticmethod
    async def create_session(db: AsyncSession, request: CreateSessionRequest, creator_user_id: UUID) -> SessionResponse:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        
        # üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üîç DEBUG: create_session - –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò")
        print(f"üîç DEBUG: create_session - request.creator_display_name='{request.creator_display_name}'")
        print(f"üîç DEBUG: create_session - creator_user_id='{creator_user_id}'")
        print(f"üîç DEBUG: create_session - request.name='{request.name}'")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –∏–≥—Ä —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        await SessionService._ensure_game_types_exist(db)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π UUID –¥–ª—è —Å–µ—Å—Å–∏–∏
        from uuid import uuid4
        session_id = uuid4()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º game_type –Ω–∞ –æ—Å–Ω–æ–≤–µ template_id –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        game_type_id = request.game_type_id or 1  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π ID –¥–ª—è kolkhoz
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_session = GameSession(
            id=session_id,
            creator_user_id=creator_user_id,
            game_type_id=game_type_id,
            template_id=request.template_id,
            name=request.name or "–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è",
            status="waiting",
            max_players=request.max_players,
            current_players_count=1,
            rules=request.rules or {"point_value_rubles": 50.0}
        )
        db.add(db_session)
        
        # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è display_name
        display_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  # fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if request.creator_display_name and request.creator_display_name.strip():
            display_name = request.creator_display_name.strip()
        
        print(f"üîç DEBUG: –°–æ–∑–¥–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å display_name='{display_name}' (–∏–∑ request.creator_display_name='{request.creator_display_name}')")
        
        # –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = SessionParticipant(
            session_id=session_id,
            user_id=creator_user_id,
            display_name=display_name,  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–º—è
            session_role="creator",
            is_empty_user=False,
            queue_position=1,
            can_modify_settings=True,
            can_kick_players=True,
            can_change_rules=True
        )
        db.add(participant)
        
        # üîÑ –£–ë–ò–†–ê–ï–ú: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞
        # –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–µ—Å—Å–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
        await db.commit()
        await db.refresh(db_session)
        await db.refresh(participant)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        session = SessionResponse(
            id=session_id,
            creator_user_id=creator_user_id,
            game_type=GameTypeResponse(
                id=game_type_id,
                name="kolkhoz",
                display_name="–ö–æ–ª—Ö–æ–∑",
                description="–ò–≥—Ä–∞ –ö–æ–ª—Ö–æ–∑ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞—Å—á–µ—Ç–æ–≤",
                default_rules={"point_value_rubles": 50.0},
                is_active=True
            ),
            template_id=request.template_id,
            name=request.name or "–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è",
            status=SessionStatus.WAITING,
            max_players=request.max_players,
            current_players_count=1,  # –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ 1 —É—á–∞—Å—Ç–Ω–∏–∫ (—Å–æ–∑–¥–∞—Ç–µ–ª—å)
            rules=request.rules or {"point_value_rubles": 50.0},
            participants=[
                SessionParticipantResponse(
                    id=participant.id,
                    user_id=creator_user_id,
                    display_name=participant.display_name,
                    session_role=SessionRole(participant.session_role),
                    is_empty_user=participant.is_empty_user,
                    joined_at=participant.joined_at,
                    queue_position=1,
                    current_score=0,
                    is_active=True,
                    can_modify_settings=True,
                    can_kick_players=True,
                    can_change_rules=True,
                    session_balance_rubles=0.0,
                    total_games_played=0,
                    total_balls_potted=0
                )
            ],
            created_at=db_session.created_at,
            started_at=None,
            completed_at=None,
            updated_at=db_session.updated_at
        )
        
        return session
    
    @staticmethod
    async def get_session(db: AsyncSession, session_id: UUID) -> Optional[SessionResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""
        
        # –ß–∏—Ç–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        db_session = await db.get(GameSession, session_id)
        if not db_session:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
        from sqlalchemy import select
        participants_query = await db.execute(
            select(SessionParticipant)
            .where(SessionParticipant.session_id == session_id)
            .where(SessionParticipant.is_active == True)
            .order_by(SessionParticipant.queue_position)
        )
        db_participants = participants_query.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–≥—Ä—ã
        game_type_query = await db.execute(
            select(GameType)
            .where(GameType.id == db_session.game_type_id)
        )
        db_game_type = game_type_query.scalar_one_or_none()
        
        if not db_game_type:
            return None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Pydantic –º–æ–¥–µ–ª–∏
        participants = []
        for db_participant in db_participants:
            participant = SessionParticipantResponse(
                id=db_participant.id,
                user_id=db_participant.user_id,
                display_name=db_participant.display_name,
                session_role=SessionRole(db_participant.session_role),
                is_empty_user=db_participant.is_empty_user,
                joined_at=db_participant.joined_at,
                queue_position=db_participant.queue_position,
                current_score=db_participant.current_score,
                is_active=db_participant.is_active,
                can_modify_settings=db_participant.can_modify_settings,
                can_kick_players=db_participant.can_kick_players,
                can_change_rules=db_participant.can_change_rules,
                session_balance_rubles=float(db_participant.session_balance_rubles) if db_participant.session_balance_rubles else 0.0,
                total_games_played=db_participant.total_games_played,
                total_balls_potted=db_participant.total_balls_potted
            )
            participants.append(participant)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        session = SessionResponse(
            id=db_session.id,
            creator_user_id=db_session.creator_user_id,
            game_type=GameTypeResponse(
                id=db_game_type.id,
                name=db_game_type.name,
                display_name=db_game_type.display_name,
                description=db_game_type.description,
                default_rules=db_game_type.default_rules,
                is_active=db_game_type.is_active
            ),
            template_id=db_session.template_id,
            name=db_session.name,
            status=SessionStatus(db_session.status),
            max_players=db_session.max_players,
            current_players_count=db_session.current_players_count,
            rules=db_session.rules,
            participants=participants,
            created_at=db_session.created_at,
            started_at=db_session.started_at,
            completed_at=db_session.completed_at,
            updated_at=db_session.updated_at,
            creation_step=getattr(db_session, 'creation_step', 1)  # üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Å fallback
        )
        
        return session
    
    @staticmethod
    async def join_session(session_id: UUID, user_id: UUID, request: JoinSessionRequest) -> SessionResponse:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ (stub)"""
        
        # –ó–∞–≥–ª—É—à–∫–∞ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Å—Å–∏—é
        return await SessionService.get_session(session_id)
    
    @staticmethod
    async def leave_session(session_id: UUID, user_id: UUID) -> SessionResponse:
        """–ü–æ–∫–∏–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (stub)"""
        
        # –ó–∞–≥–ª—É—à–∫–∞ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Å—Å–∏—é
        return await SessionService.get_session(session_id)
    
    @staticmethod
    async def get_user_sessions(db: AsyncSession, user_id: UUID, limit: int = 10, offset: int = 0, status: Optional[str] = None) -> List[SessionResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"üîç get_user_sessions: user_id={user_id}, status={status}, limit={limit}, offset={offset}")
            
            # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from sqlalchemy import select, or_
            
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - —Å–µ—Å—Å–∏–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            # –ò—Å–∫–ª—é—á–∞–µ–º JSON –ø–æ–ª—è –∏–∑ UNION –∑–∞–ø—Ä–æ—Å–∞
            creator_query = select(
                GameSession.id,
                GameSession.creator_user_id,
                GameSession.game_type_id,
                GameSession.template_id,
                GameSession.name,
                GameSession.status,
                GameSession.max_players,
                GameSession.current_players_count,
                GameSession.created_at,
                GameSession.started_at,
                GameSession.completed_at,
                GameSession.updated_at,
                GameSession.creation_step  # üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è
            ).where(GameSession.creator_user_id == user_id)
            
            participant_query = select(
                GameSession.id,
                GameSession.creator_user_id,
                GameSession.game_type_id,
                GameSession.template_id,
                GameSession.name,
                GameSession.status,
                GameSession.max_players,
                GameSession.current_players_count,
                GameSession.created_at,
                GameSession.started_at,
                GameSession.completed_at,
                GameSession.updated_at,
                GameSession.creation_step  # üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è
            ).join(
                SessionParticipant,
                SessionParticipant.session_id == GameSession.id
            ).where(
                SessionParticipant.user_id == user_id,
                SessionParticipant.is_active == True
            )
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
            base_query = creator_query.union(participant_query)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if status:
                print(f"üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: {status}")
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–∑–∞–ø—Ä–æ—Å—É
                creator_query = creator_query.where(GameSession.status == status)
                participant_query = participant_query.where(GameSession.status == status)
                base_query = creator_query.union(participant_query)
            else:
                print(f"üîç –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –Ω–µ —É–∫–∞–∑–∞–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            base_query = base_query.offset(offset).limit(limit)
            
            print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å...")
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = await db.execute(base_query)
            db_sessions = result.all()
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(db_sessions)}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Pydantic –º–æ–¥–µ–ª–∏
            sessions = []
            for db_session_row in db_sessions:
                try:
                    session_id = db_session_row[0]  # id
                    print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é: {session_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –≤–∫–ª—é—á–∞—è JSON –ø–æ–ª—è
                    full_session_query = await db.execute(
                        select(GameSession).where(GameSession.id == session_id)
                    )
                    db_session = full_session_query.scalar_one()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
                    participants_query = await db.execute(
                        select(SessionParticipant)
                        .where(SessionParticipant.session_id == session_id)
                        .where(SessionParticipant.is_active == True)
                        .order_by(SessionParticipant.queue_position)
                    )
                    db_participants = participants_query.scalars().all()
                    print(f"üîç –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: {len(db_participants)}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–≥—Ä—ã
                    game_type_query = await db.execute(
                        select(GameType)
                        .where(GameType.id == db_session.game_type_id)
                    )
                    db_game_type = game_type_query.scalar_one_or_none()
                    
                    if not db_game_type:
                        print(f"‚ö†Ô∏è –¢–∏–ø –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
                        continue
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    participants = []
                    for db_participant in db_participants:
                        participant = SessionParticipantResponse(
                            id=db_participant.id,
                            user_id=db_participant.user_id,
                            display_name=db_participant.display_name,
                            session_role=SessionRole(db_participant.session_role),
                            is_empty_user=db_participant.is_empty_user,
                            joined_at=db_participant.joined_at,
                            queue_position=db_participant.queue_position,
                            current_score=db_participant.current_score,
                            is_active=db_participant.is_active,
                            can_modify_settings=db_participant.can_modify_settings,
                            can_kick_players=db_participant.can_kick_players,
                            can_change_rules=db_participant.can_change_rules,
                            session_balance_rubles=float(db_participant.session_balance_rubles) if db_participant.session_balance_rubles else 0.0,
                            total_games_played=db_participant.total_games_played,
                            total_balls_potted=db_participant.total_balls_potted
                        )
                        participants.append(participant)
                    
                    # –°–æ–∑–¥–∞–µ–º SessionResponse
                    session = SessionResponse(
                        id=db_session.id,
                        creator_user_id=db_session.creator_user_id,
                        game_type=GameTypeResponse(
                            id=db_game_type.id,
                            name=db_game_type.name,
                            display_name=db_game_type.display_name,
                            description=db_game_type.description,
                            default_rules=db_game_type.default_rules,
                            is_active=db_game_type.is_active
                        ),
                        template_id=db_session.template_id,
                        name=db_session.name,
                        status=SessionStatus(db_session.status),
                        max_players=db_session.max_players,
                        current_players_count=db_session.current_players_count,
                        rules=db_session.rules,
                        participants=participants,
                        created_at=db_session.created_at,
                        started_at=db_session.started_at,
                        completed_at=db_session.completed_at,
                        updated_at=db_session.updated_at,
                        creation_step=getattr(db_session, 'creation_step', 1)  # üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Å fallback
                    )
                    sessions.append(session)
                    print(f"‚úÖ –°–µ—Å—Å–∏—è {session_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏–∏ {session_id if 'session_id' in locals() else 'unknown'}: {e}")
                    continue
            
            print(f"‚úÖ get_user_sessions –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {len(sessions)} —Å–µ—Å—Å–∏–π")
            return sessions
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_user_sessions: {e}")
            import traceback
            traceback.print_exc()
            raise

    @staticmethod
    async def get_session_players(db: AsyncSession, session_id: UUID) -> List[SessionParticipantResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏"""
        
        # –ß–∏—Ç–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from sqlalchemy import select
        participants_query = await db.execute(
            select(SessionParticipant)
            .where(SessionParticipant.session_id == session_id)
            .where(SessionParticipant.is_active == True)
            .order_by(SessionParticipant.queue_position)
        )
        db_participants = participants_query.scalars().all()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Pydantic –º–æ–¥–µ–ª–∏
        participants = []
        for db_participant in db_participants:
            participant = SessionParticipantResponse(
                id=db_participant.id,
                user_id=db_participant.user_id,
                display_name=db_participant.display_name,
                session_role=SessionRole(db_participant.session_role),
                is_empty_user=db_participant.is_empty_user,
                joined_at=db_participant.joined_at,
                queue_position=db_participant.queue_position,
                current_score=db_participant.current_score,
                is_active=db_participant.is_active,
                can_modify_settings=db_participant.can_modify_settings,
                can_kick_players=db_participant.can_kick_players,
                can_change_rules=db_participant.can_change_rules,
                session_balance_rubles=float(db_participant.session_balance_rubles) if db_participant.session_balance_rubles else 0.0,
                total_games_played=db_participant.total_games_played,
                total_balls_potted=db_participant.total_balls_potted
            )
            participants.append(participant)
        
        return participants

    @staticmethod
    async def get_session_participants(db: AsyncSession, session_id: UUID) -> List[SessionParticipantResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from sqlalchemy import select
            participants_query = await db.execute(
                select(SessionParticipant)
                .where(SessionParticipant.session_id == session_id)
                .where(SessionParticipant.is_active == True)
                .order_by(SessionParticipant.queue_position)
            )
            db_participants = participants_query.scalars().all()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Pydantic –º–æ–¥–µ–ª–∏
            participants = []
            for db_participant in db_participants:
                participant = SessionParticipantResponse(
                    id=db_participant.id,
                    user_id=db_participant.user_id,
                    display_name=db_participant.display_name,
                    session_role=SessionRole(db_participant.session_role),
                    is_empty_user=db_participant.is_empty_user,
                    joined_at=db_participant.joined_at,
                    queue_position=db_participant.queue_position,
                    current_score=db_participant.current_score,
                    is_active=db_participant.is_active,
                    can_modify_settings=db_participant.can_modify_settings,
                    can_kick_players=db_participant.can_kick_players,
                    can_change_rules=db_participant.can_change_rules,
                    session_balance_rubles=float(db_participant.session_balance_rubles) if db_participant.session_balance_rubles else 0.0,
                    total_games_played=db_participant.total_games_played,
                    total_balls_potted=db_participant.total_balls_potted
                )
                participants.append(participant)
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            return participants
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
            raise

    @staticmethod
    async def add_bot_to_session(db: AsyncSession, session_id: UUID, bot_name: str, current_user_id: str) -> SessionParticipantResponse:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —Å–µ—Å—Å–∏—é"""
        try:
            print(f"üîç DEBUG: add_bot_to_session - session_id={session_id}, bot_name={bot_name}, current_user_id={current_user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã
            from sqlalchemy import select
            session_query = await db.execute(
                select(GameSession).where(GameSession.id == session_id)
            )
            db_session = session_query.scalar_one_or_none()
            
            if not db_session:
                raise ValueError("Session not found")
            
            print(f"üîç DEBUG: Found session - creator_user_id={db_session.creator_user_id}, type={type(db_session.creator_user_id)}")
            print(f"üîç DEBUG: Current user_id={current_user_id}, type={type(current_user_id)}")
            
            # –ü—Ä–∏–≤–æ–¥–∏–º current_user_id –∫ UUID –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            from uuid import UUID as UUIDType
            current_user_uuid = UUIDType(current_user_id)
            print(f"üîç DEBUG: Converted current_user_uuid={current_user_uuid}, type={type(current_user_uuid)}")
            print(f"üîç DEBUG: Comparison result: {db_session.creator_user_id == current_user_uuid}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–≤
            if db_session.creator_user_id != current_user_uuid:
                print(f"‚ùå DEBUG: Access denied! Session creator: {db_session.creator_user_id}, Current user: {current_user_uuid}")
                raise ValueError("Only session creator can add bots")
            
            print(f"‚úÖ DEBUG: Access granted! User {current_user_id} is session creator")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã
            if db_session.status == "in_progress":
                raise ValueError("Cannot add bots while game is in progress")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
            if db_session.current_players_count >= db_session.max_players:
                raise ValueError(f"Session is full (max {db_session.max_players} players)")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
            max_position_query = await db.execute(
                select(SessionParticipant.queue_position)
                .where(SessionParticipant.session_id == session_id)
                .where(SessionParticipant.is_active == True)
                .order_by(SessionParticipant.queue_position.desc())
                .limit(1)  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –î–æ–±–∞–≤–ª—è–µ–º limit(1) —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            )
            max_position_result = max_position_query.scalar_one_or_none()
            next_position = (max_position_result or 0) + 1
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞-—É—á–∞—Å—Ç–Ω–∏–∫–∞
            from uuid import uuid4
            new_bot = SessionParticipant(
                id=uuid4(),
                session_id=session_id,
                user_id=None,  # –£ –±–æ—Ç–∞ –Ω–µ—Ç user_id
                display_name=bot_name,
                session_role="participant",
                is_empty_user=True,  # –≠—Ç–æ –±–æ—Ç
                queue_position=next_position,
                can_modify_settings=False,
                can_kick_players=False,
                can_change_rules=False
            )
            db.add(new_bot)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
            db_session.current_players_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await db.commit()
            await db.refresh(new_bot)
            await db.refresh(db_session)
            
            print(f"‚úÖ –ë–æ—Ç {bot_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é {session_id}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
            return SessionParticipantResponse(
                id=new_bot.id,
                user_id=new_bot.user_id,
                display_name=new_bot.display_name,
                session_role=SessionRole(new_bot.session_role),
                is_empty_user=new_bot.is_empty_user,
                joined_at=new_bot.joined_at,
                queue_position=new_bot.queue_position,
                current_score=new_bot.current_score,
                is_active=new_bot.is_active,
                can_modify_settings=new_bot.can_modify_settings,
                can_kick_players=new_bot.can_kick_players,
                can_change_rules=new_bot.can_change_rules,
                session_balance_rubles=float(new_bot.session_balance_rubles) if new_bot.session_balance_rubles else 0.0,
                total_games_played=new_bot.total_games_played,
                total_balls_potted=new_bot.total_balls_potted
            )
            
        except Exception as e:
            await db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —Å–µ—Å—Å–∏—é {session_id}: {e}")
            raise

    @staticmethod
    async def remove_participant_from_session(db: AsyncSession, session_id: UUID, participant_id: UUID, current_user_id: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–µ—Å—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã
            from sqlalchemy import select
            session_query = await db.execute(
                select(GameSession).where(GameSession.id == session_id)
            )
            db_session = session_query.scalar_one_or_none()
            
            if not db_session:
                raise ValueError("Session not found")
            
            # –ü—Ä–∏–≤–æ–¥–∏–º current_user_id –∫ UUID –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            from uuid import UUID as UUIDType
            current_user_uuid = UUIDType(current_user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if db_session.creator_user_id != current_user_uuid:
                raise ValueError("Only session creator can remove participants")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã
            if db_session.status == "in_progress":
                raise ValueError("Cannot remove participants while game is in progress")
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            participant_query = await db.execute(
                select(SessionParticipant)
                .where(SessionParticipant.id == participant_id)
                .where(SessionParticipant.session_id == session_id)
                .where(SessionParticipant.is_active == True)
            )
            db_participant = participant_query.scalar_one_or_none()
            
            if not db_participant:
                raise ValueError("Participant not found")
            
            # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–µ—Å—Å–∏–∏
            if db_participant.session_role == "creator":
                raise ValueError("Cannot remove session creator")
            
            # –ü–æ–º–µ—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
            db_participant.is_active = False
            db_participant.left_at = datetime.now(timezone.utc)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
            db_session.current_players_count -= 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await db.commit()
            await db.refresh(db_session)
            
            print(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {db_participant.display_name} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏ {session_id}")
            
        except Exception as e:
            await db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
            raise

    @staticmethod
    async def add_player_to_session(db: AsyncSession, session_id: UUID, request: InvitePlayerRequest, current_user_id: str) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —Å–µ—Å—Å–∏—é"""
        try:
            # üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üîç DEBUG: add_player_to_session - –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò")
            print(f"üîç DEBUG: add_player_to_session - session_id={session_id}")
            print(f"üîç DEBUG: add_player_to_session - request.display_name={request.display_name}")
            print(f"üîç DEBUG: add_player_to_session - request.user_id={request.user_id}")
            print(f"üîç DEBUG: add_player_to_session - current_user_id={current_user_id}")
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã
            from sqlalchemy import select
            session_query = await db.execute(
                select(GameSession).where(GameSession.id == session_id)
            )
            db_session = session_query.scalar_one_or_none()
            
            if not db_session:
                raise ValueError("Session not found")
            
            # –ü—Ä–∏–≤–æ–¥–∏–º current_user_id –∫ UUID –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            from uuid import UUID as UUIDType
            current_user_uuid = UUIDType(current_user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
            if db_session.creator_user_id != current_user_uuid:
                raise ValueError("Only session creator can add players")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã
            if db_session.status == "in_progress":
                raise ValueError("Cannot add players while game is in progress")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
            if db_session.current_players_count >= db_session.max_players:
                raise ValueError(f"Session is full (max {db_session.max_players} players)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ —É–∂–µ –Ω–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
            existing_participant_query = await db.execute(
                select(SessionParticipant)
                .where(SessionParticipant.session_id == session_id)
                .where(SessionParticipant.user_id == request.user_id)
                .where(SessionParticipant.is_active == True)
            )
            existing_participant = existing_participant_query.scalar_one_or_none()
            
            if existing_participant:
                # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                print(f"‚úÖ –ò–≥—Ä–æ–∫ {request.display_name} —É–∂–µ –≤ —Å–µ—Å—Å–∏–∏ {session_id}")
                return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –æ—à–∏–±–∫–∏
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
            max_position_query = await db.execute(
                select(SessionParticipant.queue_position)
                .where(SessionParticipant.session_id == session_id)
                .where(SessionParticipant.is_active == True)
                .order_by(SessionParticipant.queue_position.desc())
                .limit(1)  # üîÑ –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –î–æ–±–∞–≤–ª—è–µ–º limit(1) —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            )
            max_position_result = max_position_query.scalar_one_or_none()
            next_position = (max_position_result or 0) + 1
            
            # üîÑ –î–û–ë–ê–í–õ–Ø–ï–ú: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            print(f"üîç DEBUG: –°–æ–∑–¥–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å display_name={request.display_name}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            new_participant = SessionParticipant(
                session_id=session_id,
                user_id=request.user_id,
                display_name=request.display_name,
                session_role=request.session_role or "participant",
                is_empty_user=False,  # –≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫, –Ω–µ –±–æ—Ç
                queue_position=next_position,
                can_modify_settings=False,
                can_kick_players=False,
                can_change_rules=False
            )
            db.add(new_participant)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
            db_session.current_players_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await db.commit()
            await db.refresh(new_participant)
            await db.refresh(db_session)
            
            print(f"‚úÖ –ò–≥—Ä–æ–∫ {request.display_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é {session_id}")
            
        except Exception as e:
            await db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Å–µ—Å—Å–∏—é {session_id}: {e}")
            raise

    @staticmethod
    async def update_session(db: AsyncSession, session_id: UUID, updates: Dict[str, Any], current_user_id: str) -> SessionResponse:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Å—Å–∏–∏"""
        try:
            print(f"üîç DEBUG: update_session - –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò")
            print(f"üîç DEBUG: update_session - session_id={session_id}, updates={updates}, current_user_id={current_user_id}")
            print(f"üîç DEBUG: updates type: {type(updates)}, updates keys: {list(updates.keys()) if updates else 'None'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if not updates:
                raise ValueError("No fields to update")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã
            from sqlalchemy import select
            session_query = await db.execute(
                select(GameSession).where(GameSession.id == session_id)
            )
            db_session = session_query.scalar_one_or_none()
            
            if not db_session:
                raise ValueError("Session not found")
            
            print(f"üîç DEBUG: Found session - creator_user_id={db_session.creator_user_id}, current_user_id={current_user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if str(db_session.creator_user_id) != current_user_id:
                raise ValueError("Only session creator can update session")
            
            print(f"üîç DEBUG: Access granted, updating fields...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            updated_fields = []
            
            if "name" in updates and updates["name"] is not None:
                db_session.name = updates["name"]
                updated_fields.append("name")
                print(f"üîç DEBUG: Updated name to: {updates['name']}")
            
            if "description" in updates and updates["description"] is not None:
                db_session.description = updates["description"]
                updated_fields.append("description")
                print(f"üîç DEBUG: Updated description to: {updates['description']}")
            
            if "max_players" in updates and updates["max_players"] is not None:
                max_players = updates["max_players"]
                if max_players < 2 or max_players > 8:
                    raise ValueError("max_players must be between 2 and 8")
                db_session.max_players = max_players
                updated_fields.append("max_players")
                print(f"üîç DEBUG: Updated max_players to: {max_players}")
            
            if "rules" in updates and updates["rules"] is not None:
                db_session.rules = updates["rules"]
                updated_fields.append("rules")
                print(f"üîç DEBUG: Updated rules")
            
            if "status" in updates and updates["status"] is not None:
                status = updates["status"]
                print(f"üîç DEBUG: status value: {status}, type: {type(status)}")
                print(f"üîç DEBUG: current_players_count: {db_session.current_players_count}, type: {type(db_session.current_players_count)}")
                print(f"üîç DEBUG: current_players_count < 2: {db_session.current_players_count < 2}")
                
                if status == "in_progress":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞
                    print(f"üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è—é —É—Å–ª–æ–≤–∏–µ –¥–ª—è in_progress: current_players_count >= 2")
                    if db_session.current_players_count < 2:
                        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞: current_players_count ({db_session.current_players_count}) < 2")
                        raise ValueError("Cannot start session with less than 2 players")
                    print(f"‚úÖ DEBUG: –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: current_players_count ({db_session.current_players_count}) >= 2")
                    db_session.status = status
                    db_session.started_at = datetime.now(timezone.utc)
                    updated_fields.append("status")
                    updated_fields.append("started_at")
                    print(f"üîç DEBUG: Updated status to: {status}")
                elif status in ["waiting", "completed", "cancelled"]:
                    db_session.status = status
                    updated_fields.append("status")
                    print(f"üîç DEBUG: Updated status to: {status}")
                else:
                    print(f"‚ùå DEBUG: –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
                    raise ValueError(f"Invalid status: {status}")
            
            if "creation_step" in updates:
                creation_step = updates["creation_step"]
                print(f"üîç DEBUG: creation_step value: {creation_step}, type: {type(creation_step)}")
                if creation_step is not None:
                    if creation_step < 1 or creation_step > 3:
                        raise ValueError("creation_step must be between 1 and 3")
                    db_session.creation_step = creation_step
                    updated_fields.append("creation_step")
                    print(f"üîç DEBUG: Updated creation_step to: {creation_step}")
                else:
                    print(f"üîç DEBUG: creation_step is None, skipping update")
            
            print(f"üîç DEBUG: Updated fields: {updated_fields}")
            
            if not updated_fields:
                raise ValueError("No fields to update")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            db_session.updated_at = datetime.now(timezone.utc)
            updated_fields.append("updated_at")
            
            print(f"üîç DEBUG: Committing changes to database...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await db.commit()
            await db.refresh(db_session)
            
            print(f"üîç DEBUG: Changes committed successfully")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
            return await SessionService.get_session(db, session_id)
            
        except Exception as e:
            print(f"‚ùå DEBUG: Error in update_session: {str(e)}")
            print(f"‚ùå DEBUG: Error type: {type(e)}")
            import traceback
            print(f"‚ùå DEBUG: Full traceback:")
            traceback.print_exc()
            await db.rollback()
            raise