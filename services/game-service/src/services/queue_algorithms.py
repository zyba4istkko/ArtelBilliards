"""
Queue Algorithms - –ê–ª–≥–æ—Ä–∏—Ç–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤
"""

import random
import math
from typing import List, Dict, Any
from uuid import UUID


class QueueAlgorithms:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤"""
    
    @staticmethod
    def generate_always_random_queue(participants: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Always Random - –í—Å–µ–≥–¥–∞ —Å–ª—É—á–∞–π–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
        
        Args:
            participants: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        """
        shuffled = participants.copy()
        random.shuffle(shuffled)
        return shuffled
    
    @staticmethod
    def generate_random_no_repeat_queue(
        participants: List[Dict[str, Any]], 
        session_id: UUID,
        previous_queues: List[List[Dict[str, Any]]] = None
    ) -> List[Dict[str, Any]]:
        """
        Random No Repeat - –°–ª—É—á–∞–π–Ω–∞—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        
        Args:
            participants: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
            session_id: ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            previous_queues: –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        """
        if not previous_queues:
            previous_queues = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏
        from itertools import permutations
        
        all_permutations = list(permutations(participants))
        total_permutations = math.factorial(len(participants))
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ö—Ä–∞–Ω–∏–º (N! - 1) –∏–≥—Ä
        max_history = total_permutations - 1
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
        recent_queues = previous_queues[-max_history:] if previous_queues else []
        available_queues = [
            perm for perm in all_permutations 
            if list(perm) not in recent_queues
        ]
        
        # –ï—Å–ª–∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª
        if not available_queues:
            available_queues = all_permutations
            print(f"üîÑ Session {session_id}: –ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–∑ {total_permutations} –∏–≥—Ä. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª.")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        return list(random.choice(available_queues))
    
    @staticmethod
    def generate_manual_queue(
        participants: List[Dict[str, Any]], 
        custom_order: List[UUID] = None
    ) -> List[Dict[str, Any]]:
        """
        Manual - –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        
        Args:
            participants: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
            custom_order: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        """
        if not custom_order:
            return participants
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ ID
        participants_dict = {str(p['id']): p for p in participants}
        
        # –°—Ç—Ä–æ–∏–º –æ—á–µ—Ä–µ–¥—å —Å–æ–≥–ª–∞—Å–Ω–æ custom_order
        ordered_queue = []
        for participant_id in custom_order:
            if str(participant_id) in participants_dict:
                ordered_queue.append(participants_dict[str(participant_id)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ custom_order
        for participant in participants:
            if participant not in ordered_queue:
                ordered_queue.append(participant)
        
        return ordered_queue


def get_queue_algorithm(algorithm_name: str):
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ –∏–º–µ–Ω–∏
    
    Args:
        algorithm_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        
    Returns:
        –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
    """
    algorithms = {
        "always_random": QueueAlgorithms.generate_always_random_queue,
        "random_no_repeat": QueueAlgorithms.generate_random_no_repeat_queue,
        "manual": QueueAlgorithms.generate_manual_queue
    }
    
    return algorithms.get(algorithm_name, QueueAlgorithms.generate_random_no_repeat_queue)
