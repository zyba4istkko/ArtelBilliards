"""
JWT Authentication Middleware for Game Service
"""

import jwt
from fastapi import HTTPException, Depends, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from typing import Optional
import httpx
from ..core.config import settings

# –°—Ö–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤
security = HTTPBearer()

async def verify_jwt_token(credentials: HTTPAuthorizationCredentials = Depends(security)) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç payload
    –í–†–ï–ú–ï–ù–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏
    """
    try:
        token = credentials.credentials
        # –í–†–ï–ú–ï–ù–ù–û: –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        payload = jwt.decode(
            token,
            options={"verify_signature": False}
        )
        print(f"üîì DEBUG: JWT payload decoded successfully: {payload}")
        return payload
    except Exception as e:
        print(f"‚ùå DEBUG: JWT decode error: {e}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=f"Invalid JWT token: {str(e)}"
        )

async def get_current_user_id(payload: dict = Depends(verify_jwt_token)) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT payload
    """
    user_id = payload.get("user_id") or payload.get("sub")
    if not user_id:
        print(f"‚ùå DEBUG: No user_id found in payload: {payload}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token payload: missing user_id"
        )
    print(f"‚úÖ DEBUG: User ID extracted successfully: {user_id}")
    return str(user_id)

async def get_current_user(payload: dict = Depends(verify_jwt_token)) -> str: # Changed return type to str
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UUID)
    –í–†–ï–ú–ï–ù–ù–û: –ù–µ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ auth-service
    """
    user_id = payload.get("user_id") or payload.get("sub")
    if not user_id:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token payload: missing user_id"
        )
    # Temporarily return user_id as string, not full user object
    return str(user_id)
