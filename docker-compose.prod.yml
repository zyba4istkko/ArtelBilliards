version: '3.8'

# Production конфигурация для Artel Billiards
# Полная микросервисная архитектура с мониторингом и логированием
# Использование: docker-compose -f docker-compose.base.yml -f docker-compose.prod.yml up

services:
  # ==================== MICROSERVICES ====================

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: auth_service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/auth_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:password@rabbitmq:5672
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-auth-secret-key}
      - SERVICE_NAME=auth-service
      - SERVICE_PORT=8001
      - ENVIRONMENT=production
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/auth-service:/app
      - ./shared-libs:/app/shared-libs
    restart: unless-stopped
    networks:
      - artel_network

  # Game Service
  game-service:
    build:
      context: ./services/game-service
      dockerfile: Dockerfile
    container_name: game_service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/game_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:password@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:8001
      - TEMPLATE_SERVICE_URL=http://template-service:8003
      - SERVICE_NAME=game-service
      - SERVICE_PORT=8002
      - ENVIRONMENT=production
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
    volumes:
      - ./services/game-service:/app
      - ./shared-libs:/app/shared-libs
    restart: unless-stopped
    networks:
      - artel_network

  # Template Service
  template-service:
    build:
      context: ./services/template-service
      dockerfile: Dockerfile
    container_name: template_service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/template_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:password@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:8001
      - SERVICE_NAME=template-service
      - SERVICE_PORT=8003
      - ENVIRONMENT=production
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
    volumes:
      - ./services/template-service:/app
      - ./shared-libs:/app/shared-libs
    restart: unless-stopped
    networks:
      - artel_network

  # Stats Service
  stats-service:
    build:
      context: ./services/stats-service
      dockerfile: Dockerfile
    container_name: stats_service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/stats_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:password@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:8001
      - SERVICE_NAME=stats-service
      - SERVICE_PORT=8004
      - ENVIRONMENT=production
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
    volumes:
      - ./services/stats-service:/app
      - ./shared-libs:/app/shared-libs
    restart: unless-stopped
    networks:
      - artel_network

  # Friends Service
  friends-service:
    build:
      context: ./services/friends-service
      dockerfile: Dockerfile
    container_name: friends_service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/friends_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:password@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:8001
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SERVICE_NAME=friends-service
      - SERVICE_PORT=8005
      - ENVIRONMENT=production
    ports:
      - "8005:8005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./services/friends-service:/app
      - ./shared-libs:/app/shared-libs
    restart: unless-stopped
    networks:
      - artel_network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: notification_service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/notification_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:password@rabbitmq:5672
      - AUTH_SERVICE_URL=http://auth-service:8001
      - SERVICE_NAME=notification-service
      - SERVICE_PORT=8006
      - ENVIRONMENT=production
    ports:
      - "8006:8006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      auth-service:
        condition: service_started
    volumes:
      - ./services/notification-service:/app
      - ./shared-libs:/app/shared-libs
    restart: unless-stopped
    networks:
      - artel_network

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8001
      - GAME_SERVICE_URL=http://game-service:8002
      - TEMPLATE_SERVICE_URL=http://template-service:8003
      - STATS_SERVICE_URL=http://stats-service:8004
      - FRIENDS_SERVICE_URL=http://friends-service:8005
      - NOTIFICATION_SERVICE_URL=http://notification-service:8006
      - REDIS_URL=redis://redis:6379
      - SERVICE_NAME=api-gateway
      - SERVICE_PORT=8000
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    depends_on:
      - auth-service
      - game-service
      - template-service
      - stats-service
      - friends-service
      - notification-service
    volumes:
      - ./api-gateway:/app
      - ./shared-libs:/app/shared-libs
    restart: unless-stopped
    networks:
      - artel_network

  # ==================== ADDITIONAL SERVICES ====================

  # Elasticsearch for user search
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: artel_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - artel_network

  # ==================== FRONTEND ====================

  # React Frontend (production build)
  frontend:
    build:
      context: ./react-app
      dockerfile: Dockerfile
      target: production
    container_name: artel_frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - artel_network

  # ==================== MONITORING STACK ====================

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: artel_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - artel_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: artel_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - artel_network

  # Loki for logs
  loki:
    image: grafana/loki:latest
    container_name: artel_loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - artel_network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: artel_jaeger
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
    restart: unless-stopped
    networks:
      - artel_network

# Production specific volumes
volumes:
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# Inherit networks from base